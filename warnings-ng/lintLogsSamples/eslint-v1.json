{
    "results": [
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/common/Constants.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/common/LocalStorageUtils.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/common/Log.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/common/NetUtils.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/common/RenderingUtils.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/common/Utils.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/github/pullRequest.js",
            "messages": [
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'browser' is assigned a value but never used.",
                    "line": 2,
                    "column": 7,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 2,
                    "endColumn": 14
                },
                {
                    "ruleId": "object-curly-spacing",
                    "severity": 2,
                    "message": "A space is required after '{'.",
                    "line": 27,
                    "column": 7,
                    "nodeType": "ObjectExpression",
                    "messageId": "requireSpaceAfter",
                    "endLine": 27,
                    "endColumn": 8,
                    "fix": {
                        "range": [
                            888,
                            888
                        ],
                        "text": " "
                    }
                },
                {
                    "ruleId": "object-curly-spacing",
                    "severity": 2,
                    "message": "A space is required before '}'.",
                    "line": 27,
                    "column": 55,
                    "nodeType": "ObjectExpression",
                    "messageId": "requireSpaceBefore",
                    "endLine": 27,
                    "endColumn": 56,
                    "fix": {
                        "range": [
                            935,
                            935
                        ],
                        "text": " "
                    }
                }
            ],
            "errorCount": 3,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "import { RenderingUtils } from '../common/RenderingUtils';\nconst browser = require('webextension-polyfill');\n\nconst PROPEL_FILES_ALERT_CLASSNAME = 'js-toggle-propel-files-alert';\nconst FILTERS_LIST_SELECTOR = '#files_bucket .js-file-filter-form .p-2';\n\n\n/**\n * In the github merge request hides automatically the propel files\n * ability to remove the filter\n */\nconst PullRequest = class PullRequest {\n\n  constructor() {\n    this.basePropelFilesDomList = [];\n    this.otherPropelFilesDomList = [];\n    this.toolbarElement = null;\n    this.BASE_PROPEL_CLASS_REGEXP = new RegExp('.*/Model/.*(Base|Map).*.php');\n    this.OTHER_PROPEL_CLASS_REGEXP = new RegExp('.*/Model/.*.php');\n  }\n\n  init() {\n    // get the option set for \n    this.autoHideBasePropelFiles = true;\n    chrome.storage.local.get(\n      // eslint-disable-next-line camelcase\n      {auto_hide_base_propel_files: '1'},\n      (result) => {\n        this.autoHideBasePropelFiles = result.auto_hide_base_propel_files === '1';\n        this.addFilesPresent();\n        this.listenForNewFiles();\n      });\n  }\n\n  static get ALERT_TEMPLATE() {\n    return `<div class=\"${PROPEL_FILES_ALERT_CLASSNAME} border rounded-1 ml-2  mr-1 p-2 px-2 py-1 rounded-1 f6\"\n      style=\"display: inline;position: relative;left: 10px;\"></div>`;\n  }\n\n  static get FILTER_TEMPLATE() {\n    return `<div class=\"d-flex\">\n      <label class=\"pl-1 mb-1\" style=\"cursor:pointer;\" role=\"menuitem\" tabindex=\"0\">\n        <input\n            class=\"js-diff-file-type-%filterType%\"\n            style=\"cursor:pointer;\"\n            type=\"checkbox\"\n            value=\"%filterType%\"\n            name=\"file-custom-filters[]\"\n        >%filterLabel% (<span class=\"text-normal js-file-type-count\">0</span>)\n      </label>\n    </div>`;\n  }\n\n  static get TOOLBAR_CLASSNAME() {\n    return '#files_bucket .pr-toolbar';\n  }\n\n  get toolbar() {\n    if (this.toolbarElement === null) {\n      this.toolbarElement = document.querySelector(PullRequest.TOOLBAR_CLASSNAME);\n    }\n\n    return this.toolbarElement;\n  }\n\n  get toolbarAlertElement() {\n    const toolbar = this.toolbar;\n    if (toolbar) {\n      return toolbar.querySelector(`.${PROPEL_FILES_ALERT_CLASSNAME}`);\n    }\n\n    return null;\n  }\n\n  /**\n   * Toggle the visibility of the filtered files (for the moment only the propel files)\n   * @param {DOMElement} $button\n   * @param {Array<DOMElement>} fileList\n   */\n  toggleFilteredFilesVisibility($button, fileList) {\n    for (const fileElement of Object.values(fileList)) {\n      this.toggleFileViewVisibility(fileElement, $button.checked);\n    }\n  }\n\n  /**\n   * mark file as viewed or unviewed\n   * @param {DOMElement} fileElement\n   * @param {Boolean} viewed\n   */\n  toggleFileViewedState(fileElement, viewed) {\n    const reviewedFileForm = fileElement.querySelector('.js-toggle-user-reviewed-file-form');\n    const reviewedFileCheckbox = reviewedFileForm.querySelector('.js-reviewed-checkbox');\n\n    if (reviewedFileCheckbox.checked !== viewed) {\n      reviewedFileCheckbox.click();\n    }\n  }\n\n  /**\n   * Hide or show given file diff view\n   * @param {DOMElement} fileElement\n   * @param {Boolean} visible\n   */\n  toggleFileViewVisibility(fileElement, visible) {\n    const fileToggleButton = fileElement.querySelector('.js-details-target');\n    const fileToggleExpanded = fileToggleButton.getAttribute('aria-expanded') === 'true';\n\n    if (fileToggleExpanded !== visible) {\n      fileToggleButton.click();\n    }\n  }\n\n  /**\n   * update the filters and count\n   * displays an alert if at least one base propel is hidden\n   * we suppose\n   * - that files element is already present\n   * - that if we call this at least one propel file is present\n   */\n  updateFilters() {\n    // display the alert if not already displayed\n    let toolbarAlertElement = this.toolbarAlertElement;\n    if (toolbarAlertElement === null) {\n      const alertParent = RenderingUtils.querySelectorHas(`${PullRequest.TOOLBAR_CLASSNAME } div.flex-1.flex-shrink-0`, '.diffbar-item.details-reset')?.[0]?.parentElement;\n      if (alertParent) {\n        alertParent.appendChild(RenderingUtils.createDomNodeFromHtmlTemplate(PullRequest.ALERT_TEMPLATE));\n        toolbarAlertElement = this.toolbarAlertElement;\n      }\n    }\n\n    // add filters\n    let filtersList = document.querySelector(FILTERS_LIST_SELECTOR);\n    this.updateFilter(filtersList, 'basePropelFiles', 'base propel files', this.basePropelFilesDomList, !this.autoHideBasePropelFiles);\n    this.updateFilter(filtersList, 'otherPropelFiles', 'other propel files', this.otherPropelFilesDomList, true);\n\n    // update alert\n    if (this.basePropelFilesDomList.length > 0) {\n      let title = `${this.basePropelFilesDomList.length} base propel could be auto viewed`;\n      if (this.autoHideBasePropelFiles) {\n        title = `${this.basePropelFilesDomList.length} base propel marked as viewed`;\n      }\n      if (toolbarAlertElement) {\n        let label = `${this.basePropelFilesDomList.length} base propel detected`;\n        let classRemove = 'bg-red-light';\n        let classAdd = 'bg-green-light';\n        if (this.autoHideBasePropelFiles) {\n          label = `${this.basePropelFilesDomList.length} base propel`;\n          classRemove = 'bg-green-light';\n          classAdd = 'bg-red-light';\n        }\n        this.toolbarAlertElement.innerHTML = label;\n        this.toolbarAlertElement.setAttribute('title', title);\n        this.toolbarAlertElement.classList.remove(classRemove);\n        this.toolbarAlertElement.classList.add(classAdd);\n      } else {\n        // eslint-disable-next-line no-alert\n        alert(title);\n      }\n    }\n  }\n\n  /**\n   * add/update the filter\n   * @param {Array<DOMElement>} filtersList\n   * @param {String} filterType\n   * @param {String} filterLabel\n   * @param {Array<DOMElement>} fileElementlist\n   * @param {Boolean} defaultChecked true if checkbox should be initially checked\n   */\n  // eslint-disable-next-line max-params\n  updateFilter(filtersList, filterType, filterLabel, fileElementlist, defaultChecked) {\n    let filter = RenderingUtils.querySelectorHas('.d-flex', `.js-diff-file-type-${filterType}`, filtersList);\n    let filterDiv = null;\n\n    // add the filter if not existent\n    if (filter.length === 0) {\n      filter = RenderingUtils.createDomNodeFromHtmlTemplate(\n        PullRequest.FILTER_TEMPLATE,\n        {\n          filterType,\n          filterLabel\n        }\n      );\n      filterDiv = document.createElement('div');\n      filterDiv.appendChild(filter);\n      document.querySelector(`${FILTERS_LIST_SELECTOR} .ml-1`).insertAdjacentElement(\n        'beforeend',\n        filterDiv\n      );\n      filterDiv.onchange = (event) => {\n        if (event.target.type === 'checkbox') {\n          this.toggleFilteredFilesVisibility(event.target, fileElementlist);\n        }\n\n        return false;\n      };\n    } else {\n      filterDiv = filter[0];\n    }\n\n    // update the filter\n    filterDiv.querySelector('input[type=checkbox]').checked = defaultChecked;\n    filterDiv.querySelector('.js-file-type-count').innerText = fileElementlist.length;\n  }\n\n  /**\n   * dispatch $elem upon basePropelFilesDomList or otherPropelFilesDomList\n   * updateFilters if new file is added in one of the two lists\n   * @param {DOMElement} $elem\n   */\n  checkFile($elem) {\n    const fileName = $elem.querySelector('.file-info a').getAttribute('title');\n    let newFileAdded = false;\n    // eslint-disable-next-line no-console\n    console.debug(`check file : ${fileName}`);\n    if (this.BASE_PROPEL_CLASS_REGEXP.test(fileName)) {\n      // eslint-disable-next-line no-console\n      console.debug(`detected base propel file : ${fileName}`);\n      if (this.autoHideBasePropelFiles) {\n        this.toggleFileViewedState($elem, true);\n      }\n      this.basePropelFilesDomList.push($elem);\n      newFileAdded = true;\n    } else if (this.OTHER_PROPEL_CLASS_REGEXP.test(fileName)) {\n      // eslint-disable-next-line no-console\n      console.debug(`detected other propel file : ${fileName}`);\n      this.otherPropelFilesDomList.push($elem);\n      newFileAdded = true;\n    } else {\n      // eslint-disable-next-line no-console\n      console.debug(`detected other file : ${fileName}`);\n    }\n    if (newFileAdded) {\n      this.updateFilters();\n    }\n  }\n\n  /**\n   * add the files already loaded on the page before ajax query terminated\n   */\n  addFilesPresent() {\n    document.querySelectorAll('#files .js-file-header').forEach((element) => {\n      // eslint-disable-next-line no-invalid-this\n      this.checkFile(element);\n    });\n  }\n\n  /**\n   * listen for new files added via ajax queries\n   */\n  listenForNewFiles() {\n    document.getElementById('files').addEventListener(\n      'DOMNodeInserted', (e) => {\n        if (typeof e.target.dataset !== 'undefined' && e.target.dataset.fileType === '.php') {\n          this.checkFile(e.target);\n        }\n      }\n    );\n  }\n\n};\n\nconst pullRequest = new PullRequest();\npullRequest.init();\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jenkins/jenkins.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/Branch.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/BranchRenderer.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/BranchStats.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/JiraController.js",
            "messages": [
                {
                    "ruleId": "object-curly-spacing",
                    "severity": 2,
                    "message": "A space is required after '{'.",
                    "line": 276,
                    "column": 28,
                    "nodeType": "ObjectExpression",
                    "messageId": "requireSpaceAfter",
                    "endLine": 276,
                    "endColumn": 29,
                    "fix": {
                        "range": [
                            8674,
                            8674
                        ],
                        "text": " "
                    }
                },
                {
                    "ruleId": "object-curly-spacing",
                    "severity": 2,
                    "message": "A space is required before '}'.",
                    "line": 276,
                    "column": 34,
                    "nodeType": "ObjectExpression",
                    "messageId": "requireSpaceBefore",
                    "endLine": 276,
                    "endColumn": 35,
                    "fix": {
                        "range": [
                            8679,
                            8679
                        ],
                        "text": " "
                    }
                }
            ],
            "errorCount": 2,
            "warningCount": 0,
            "fixableErrorCount": 2,
            "fixableWarningCount": 0,
            "source": "/* global fetch, document, window, console, CustomEvent, JiraSettings */\n// eslint-disable-next-line no-unused-vars\nimport { JiraIssueDataWrapper } from './JiraIssueDataWrapper';\nimport { JiraRenderer } from './JiraRenderer';\nimport { LoadingProgress } from './LoadingProgress';\nimport { Log } from 'CommonLib/Log';\nimport { LogsRenderer } from './LogsRenderer';\nimport { RenderingUtils } from 'CommonLib/RenderingUtils';\nimport { ToolbarsContainerRenderer } from './ToolbarsContainerRenderer';\n\nexport default class JiraController {\n\n  constructor() {\n    // this trick is used because jira seems to add nodes twice for the same issue\n    this._locks = {};\n\n    // the main issue key\n    this.pageIssueKey = null;\n\n    // lazy loaded components\n    this._loadingProgress = null;\n    this._renderer = null;\n    this._toolbarsContainerRenderer = null;\n  }\n\n  get loadingProgress() {\n    if (!this._loadingProgress) {\n      this._loadingProgress = new LoadingProgress();\n    }\n\n    return this._loadingProgress;\n  }\n\n  /**\n   * div container that will be used for all the toolbars\n   * @return {ToolbarsContainerRenderer}\n   */\n  get toolbarsContainerRenderer() {\n    if (!this._toolbarsContainerRenderer) {\n      this._toolbarsContainerRenderer = new ToolbarsContainerRenderer();\n    }\n\n    return this._toolbarsContainerRenderer;\n  }\n\n  get renderer() {\n    if (!this._renderer) {\n      this._renderer = new JiraRenderer();\n    }\n\n    return this._renderer;\n  }\n\n  /**\n   * This method is used to detect\n   * - when the issue is changing or loaded via ajax (via DOMNodeInserted event listener)\n   * - or the first time the issue page is loaded (no ajax call)\n   */\n  run() {\n    Log.addLog('Jira support running', Log.LEVEL_DEBUG);\n\n    const subNodeSelector = RenderingUtils.isRapidBoardView ? '#ghx-detail-issue' : '.aui-toolbar2-primary';\n    const issueContainer = RenderingUtils.isRapidBoardView\n      ? document.querySelector('.ghx-detail-view')\n      : document.querySelector('.content');\n\n    const domNodeInsertedMatcher = RenderingUtils.isRapidBoardView\n      ? e => e.relatedNode.id === 'ghx-detail-contents' && e.relatedNode.querySelector(subNodeSelector)\n      : e => e.relatedNode.classList.contains('command-bar') && e.relatedNode.querySelector(subNodeSelector);\n\n    issueContainer.addEventListener(\n      'DOMNodeInserted', (e) => {\n        if (domNodeInsertedMatcher(e)) {\n          this.loadInterface();\n        }\n      }\n    );\n    if (!RenderingUtils.isRapidBoardView) {\n      // issue is rendered during page load (no ajax call)\n      if (issueContainer.querySelector('#issue-content')) {\n        this.loadInterface();\n      }\n    }\n  }\n\n  /**\n   * main method that will do all necessary ajax calls\n   * and create all toolbars\n   * manage logs and loading progress\n   */\n  async loadInterface() {\n    try {\n      const pageIssueKey = this.lockPageIssueKeyFromUrl();\n\n      this.loadingProgress.init();\n\n      this.fetchIssueDataFromJiraAPI()\n        // finish here in case of error\n        .catch((error) => {\n          Log.addLog(`unable to get data from jira for ${pageIssueKey}`, Log.LEVEL_CRITICAL, { error });\n          throw error;\n        })\n        // render issue for each repo\n        .then((issueData) => {\n          this._issueData = new JiraIssueDataWrapper(issueData);\n          if (this._issueData.isEpic) {\n            return this.fetchEpicIssuesFromJira(this._issueData.key);\n          }\n\n          return null;\n        })\n        .then((epicIssues) => {\n          if (this._issueData.isEpic) {\n            this._issueData.fields.epicIssues = epicIssues?.issues;\n          }\n\n          return this.generateBranches(this._issueData, false, this.renderBranchCallback.bind(this));\n        })\n        .then(promises => Promise.all(promises))\n        // catch generate branches errors\n        .catch((error) => {\n          if (!error?.logged) {\n            Log.addIssueLog(\n              { key: this.pageIssueKey }, `Error while fetching data for ${this.pageIssueKey}`,\n              Log.LEVEL_ERROR, { error }\n            );\n          }\n        })\n        // render deep analysis button\n        .then(() => new Promise((resolve) => {\n          this.renderer.renderDeepAnalysisButton(this._issueData, this.deepAnalysisButtonCallback.bind(this));\n          resolve();\n        }))\n        // catch rendering errors\n        .catch((error) => {\n          if (!error?.logged) {\n            Log.addIssueLog(\n              { key: this.pageIssueKey }, `Error while rendering issue ${this.pageIssueKey}`,\n              Log.LEVEL_ERROR, { error }\n            );\n          }\n        })\n        .finally(() => {\n          // remove the double loading lock\n          delete this._locks[this.pageIssueKey];\n\n          LogsRenderer.renderErrors(this.pageIssueKey);\n\n          // we can remove progressBar if it's not done yet\n          this.loadingProgress.remove();\n        });\n    } catch (error) {\n      if (!error?.logged) {\n        // eslint-disable-next-line no-console\n        console.error('unexpected error', error);\n      }\n    }\n  }\n\n  /**\n  * callback triggered when user click on deep analysis button\n  */\n  async deepAnalysisButtonCallback() {\n    try {\n      this.lockPageIssueKeyFromUrl();\n      this.toolbarsContainerRenderer.remove();\n      LogsRenderer.remove();\n      this.loadingProgress.init();\n\n      this.generateBranches(this._issueData, true, this.renderBranchCallback.bind(this))\n        .then(promises => Promise.all(promises))\n        .catch((error) => {\n          if (!error?.logged) {\n            Log.addIssueLog(\n              { key: this.pageIssueKey }, `Error while fetching data for ${this.pageIssueKey}`,\n              Log.LEVEL_ERROR, { error }\n            );\n          }\n        })\n        .finally(() => {\n          // remove the double loading lock\n          delete this._locks[this.pageIssueKey];\n          LogsRenderer.renderErrors(this.pageIssueKey);\n          // we can remove progressBar\n          this.loadingProgress.remove();\n        });\n    } catch (error) {\n      if (!error?.logged) {\n        Log.addIssueLog(\n          { key: this.pageIssueKey }, `Error while deep analysis of issue ${this.pageIssueKey}`,\n          Log.LEVEL_ERROR, { error }\n        );\n      }\n      // remove the double loading lock\n      delete this._locks[this.pageIssueKey];\n      LogsRenderer.renderErrors(this.pageIssueKey);\n      // we can remove progressBar\n      this.loadingProgress.remove();\n    }\n  }\n\n  /**\n   * Retrieve issue key from url\n   * @throws {Error} log error and throws error if issue\n   *   - not found\n   *   - locked\n   * @return {string} the issue key\n   */\n  lockPageIssueKeyFromUrl() {\n    let matches = (/browse\\/(?<projectKey1>[A-Z-a-z0-9]+-([0-9]+))|issues\\/(?<projectKey2>[A-Z-a-z0-9]+-([0-9]+))\\??|RapidBoard\\.jspa\\?.*selectedIssue=(?<projectKey3>[A-Z-a-z0-9]+-([0-9]+))/)\n      .exec(window.location.href);\n\n    this.pageIssueKey = null;\n    if (matches && matches.length) {\n      this.pageIssueKey = matches.groups.projectKey1 || matches.groups.projectKey2 || matches.groups.projectKey3;\n      if (this._locks?.[this.pageIssueKey]) {\n        Log.addLog('avoiding ck toolbar duplicate loading', Log.LEVEL_DEBUG);\n        throw new Error('Issue Locked');\n      }\n      this._locks[this.pageIssueKey] = true;\n\n      return this.pageIssueKey;\n    }\n\n    Log.addLog('No issue key', Log.LEVEL_CRITICAL);\n    throw new Error('No issue key');\n  }\n\n\n  /**\n    * @return {Promise<JiraIssue>}\n    */\n  async fetchIssueDataFromJiraAPI() {\n    return await fetch(`https://jira.fchastanet.com/rest/api/2/issue/${this.pageIssueKey}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw Error(response.statusText);\n        }\n\n        return response.json();\n      });\n  }\n\n  /**\n   * grab data from jira for the epic's linked issues\n   * @param {String} epicIssueKey\n   * @return {JiraIssueDataWrapper}\n   */\n  async fetchEpicIssuesFromJira(epicIssueKey) {\n    // eslint-disable-next-line arrow-body-style\n    const jqlQuery = `\"Epic Link\" = ${epicIssueKey}`;\n\n    return fetch('https://jira.fchastanet.com/rest/api/2/search', {\n      method:  'POST',\n      headers: {\n        'Accept':       'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        jql:        jqlQuery,\n        maxResults: 100,\n        fields:     ['*all'],\n        startAt:    0\n      })\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n\n        return response.json();\n      })\n      .catch((error) => {\n        Log.addIssueLog(\n          this._issueData, 'Error while fetching data for epic issues',\n          Log.LEVEL_ERROR, {error}\n        );\n        throw error;\n      });\n  }\n\n  /**\n   * grab data from jira for the linked issues\n   * @param {Array} issuesToFetch\n   */\n  async fetchLinkedIssuesFromJira(issuesToFetch) {\n    // eslint-disable-next-line arrow-body-style\n    const jqlQuery = `key in (${issuesToFetch.map(d => `'${d}'`).join(',')})`;\n\n    return fetch('https://jira.fchastanet.com/rest/api/2/search', {\n      method:  'POST',\n      headers: {\n        'Accept':       'application/json',\n        'Content-Type': 'application/json',\n        'User-Agent':   'XX',\n      },\n      body: JSON.stringify({\n        jql:        jqlQuery,\n        maxResults: issuesToFetch.length,\n        fields:     ['*all'],\n        startAt:    0\n      })\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw response;\n        }\n\n        return response.json();\n      })\n      .then(data => data)\n      .catch((error) => {\n        Log.addIssueLog(\n          this._issueData, 'Error while fetching data for linked issues',\n          Log.LEVEL_ERROR, { error }\n        );\n        throw error;\n      });\n  }\n\n  /**\n   * Generate data needed by loadingProgress component and update it\n   * @param {Array<key, {issue, linkType}>} issueList list of issues to load\n   * @return {Object<key, Boolean>} list of keys to be loaded\n   *   special key fetchLinkedIssuesFromJira contains the linked issue key array\n   */\n  initLoadingProgressFromIssueList(issueList) {\n    // calulate the keys for the loading progress bar\n    const elementsToLoad = {};\n    elementsToLoad.fetchLinkedIssuesFromJira = [];\n    Object.values(issueList).forEach(({ issue, linkType }) => {\n      issue.projectRepos.forEach((repo) => {\n        const key = `${repo.github.repo}_${issue.key}`;\n        elementsToLoad[`${key}_fetchBranch`] = true;\n        elementsToLoad[`${key}_render`] = true;\n      });\n      elementsToLoad.fetchLinkedIssuesFromJira.push(issue.key);\n    });\n    this.loadingProgress.elementsToLoad = elementsToLoad;\n\n    return elementsToLoad;\n  }\n\n  /**\n   * for given issue triggers the rendering of\n   * - this issue\n   * - parent issue\n   * - sub issues\n   * - linked issues\n   *\n   * each issue is represented by a Branch object containing BranchOptions object\n   * BranchOptions object indicates some options to the toolbar\n   *\n   * @param {JiraIssueDataWrapper} issueData\n   * @param {Boolean} deepAnalysis false, only this issue task is rendered\n   *  commitDelta is only calculated if not rapidBoard or deepAnalysis\n   * @param {CallableFunction} branchRenderCallback\n   * @return {Promise[]} promise for rendering each branch\n   */\n  async generateBranches(issueData, deepAnalysis, branchRenderCallback) {\n    const pageIssueKey = this.pageIssueKey;\n    const issueList = issueData.getIssueList(RenderingUtils.isRapidBoardView, deepAnalysis);\n    const issueMap = {};\n\n    // pre init\n    const elementsToLoad = this.initLoadingProgressFromIssueList(issueList);\n    if (elementsToLoad.fetchLinkedIssuesFromJira.length > 0) {\n      // fetch the linked issue from Jira first\n      const linkedIssues = await this.fetchLinkedIssuesFromJira(elementsToLoad.fetchLinkedIssuesFromJira);\n      linkedIssues.issues.forEach((issue) => {\n        issueList[issue.key] = {\n          issue,\n          linkType: issueList[issue.key].linkType,\n        };\n      });\n\n      // copy issues from issueList to issue converting json to JiraIssueDataWrapper\n      Object.keys(issueList).forEach((key) => {\n        const issueObj = issueList[key];\n        let parent = null;\n        if (issueList?.[issueObj.issue.fields?.parent?.key]) {\n          parent = issueList[issueObj.issue.fields.parent.key].issue;\n        }\n        issueObj.issue = new JiraIssueDataWrapper(issueObj.issue, parent ? new JiraIssueDataWrapper(parent) : null);\n        issueMap[issueObj.issue.key] = issueObj;\n      });\n\n      // correct loading progress (all the branches can now be calculated correctly)\n      this.initLoadingProgressFromIssueList(issueMap);\n    }\n    // fetch linked issues finished\n    document.dispatchEvent(new CustomEvent('progress', { detail: { elementCompleted: 'fetchLinkedIssuesFromJira' } }));\n\n    let branchList = issueData.getBranchList(issueMap, RenderingUtils.isRapidBoardView, deepAnalysis);\n\n    // if deep analysis, order the branches by :\n    // - linkType (this element, parent, subtask, linked)\n    //    inside same linkType, issues are ordered by repo, like in not deepAnalysis\n    // - then by issue status category(unknown, todo, dev, review, qa, done)\n    if (deepAnalysis) {\n      const issueCategoryOrder = Object.keys(JiraSettings.ISSUE_CATEGORY_LABEL);\n      branchList.sort((a, b) => {\n\n        /** @var {Branch} a */\n        /** @var {Branch} b */\n        if (a.issue.id === b.issue.id) {\n          // keep order of repository\n          return a.order - b.order;\n        }\n        // issue link type\n        if (a.branchOptions.linkType === b.branchOptions.linkType) {\n          const aStatusCategory = JiraSettings.ISSUE_STATUS_CATEGORY_MAPPING?.[a.issue.fields.status.id] || JiraSettings.ISSUE_STATUS_CATEGORY_UNKNOWN;\n          const bStatusCategory = JiraSettings.ISSUE_STATUS_CATEGORY_MAPPING?.[b.issue.fields.status.id] || JiraSettings.ISSUE_STATUS_CATEGORY_UNKNOWN;\n\n          return issueCategoryOrder.indexOf(aStatusCategory) - issueCategoryOrder.indexOf(bStatusCategory);\n        }\n\n        return JiraIssueDataWrapper.ISSUE_LINK_TYPE_ORDER.indexOf(a.branchOptions.linkType)\n          - JiraIssueDataWrapper.ISSUE_LINK_TYPE_ORDER.indexOf(b.branchOptions.linkType)\n        ;\n      });\n      branchList.forEach((branch, index) => {\n        branch.order = index;\n      });\n    }\n\n    // launch the promises\n    const promises = branchList.map((branch) => {\n      branchRenderCallback(branch, deepAnalysis, false);\n\n      return branch.fetchData()\n        .then(() => {\n          // fetch data finished\n          document.dispatchEvent(new CustomEvent('progress', { detail: { elementCompleted: `${branch.uniqueKey.key}_fetchBranch` } }));\n        })\n        .catch((error) => {\n          // fetch data finished\n          document.dispatchEvent(new CustomEvent('progress', { detail: { elementCompleted: `${branch.uniqueKey.key}_fetchBranch` } }));\n          if (!error?.logged) {\n            Log.addIssueLog(\n              issueData,\n              `error while fetching branch data for issue ${pageIssueKey}`,\n              Log.LEVEL_ERROR,\n              { error }\n            );\n          }\n        })\n        .then(() => {\n          branchRenderCallback(branch, deepAnalysis, true);\n          // rendering finished\n          document.dispatchEvent(new CustomEvent('progress', { detail: { elementCompleted: `${branch.uniqueKey.key}_render` } }));\n\n          return branch;\n        });\n    });\n\n    return promises;\n  }\n\n  /**\n   * each branch promise will use this callback to render itself\n   * @param {Branch} branch\n   * @param {Boolean} deepAnalysis\n   * @param {Boolean} full\n   */\n  renderBranchCallback(branch, deepAnalysis, full) {\n    this.toolbarsContainerRenderer.renderBranch(branch, deepAnalysis, full);\n  }\n\n}\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/JiraIssueDataWrapper.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/JiraRenderer.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/LoadingProgress.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/LogsRenderer.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/ToolbarsContainerRenderer.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/apps/jira/bootstrap.js",
            "messages": [
                {
                    "ruleId": "no-var",
                    "severity": 1,
                    "message": "Unexpected var, use let or const instead.",
                    "line": 8,
                    "column": 1,
                    "nodeType": "VariableDeclaration",
                    "messageId": "unexpectedVar",
                    "endLine": 8,
                    "endColumn": 7,
                    "fix": {
                        "range": [
                            252,
                            255
                        ],
                        "text": "let"
                    }
                },
                {
                    "ruleId": "no-unused-vars",
                    "severity": 2,
                    "message": "'a' is defined but never used.",
                    "line": 8,
                    "column": 5,
                    "nodeType": "Identifier",
                    "messageId": "unusedVar",
                    "endLine": 8,
                    "endColumn": 6
                },
                {
                    "ruleId": "no-unused-expressions",
                    "severity": 2,
                    "message": "Expected an assignment or function call and instead saw an expression.",
                    "line": 9,
                    "column": 1,
                    "nodeType": "ExpressionStatement",
                    "messageId": "unusedExpression",
                    "endLine": 9,
                    "endColumn": 2
                },
                {
                    "ruleId": "no-undef",
                    "severity": 2,
                    "message": "'b' is not defined.",
                    "line": 9,
                    "column": 1,
                    "nodeType": "Identifier",
                    "messageId": "undef",
                    "endLine": 9,
                    "endColumn": 2
                },
                {
                    "ruleId": "semi",
                    "severity": 2,
                    "message": "Missing semicolon.",
                    "line": 9,
                    "column": 2,
                    "nodeType": "ExpressionStatement",
                    "messageId": "missingSemi",
                    "endLine": 10,
                    "endColumn": 1,
                    "fix": {
                        "range": [
                            260,
                            260
                        ],
                        "text": ";"
                    }
                }
            ],
            "errorCount": 4,
            "warningCount": 1,
            "fixableErrorCount": 1,
            "fixableWarningCount": 1,
            "source": "import './LoadingProgress.css';\nimport './logs.css';\nimport './branch-name.css';\nimport JiraController from './JiraController';\nimport { MESSAGE_INJECT_JIRA_SETTINGS } from 'Apps/common/Constants.js';\nconst browser = require('webextension-polyfill');\n\nvar a;\nb\n\nrequire('es6-promise').polyfill();\nrequire('isomorphic-fetch');\nrequire('./translation.js');\n\n/**\n * @file Manage the display of branch links on Jira. Rendering classes are in file `./branchLinkRendering.js`\n */\nconst jiraController = new JiraController();\nbrowser.runtime.sendMessage({ type: MESSAGE_INJECT_JIRA_SETTINGS })\n  .then((response) => {\n    if (response?.loadJiraInterface) {\n      jiraController.run();\n    }\n  })\n  .catch((error) => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n",
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/background/Load.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/background/background.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/background/conf/_JiraSettings.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/popup/Menu.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/popup/popup.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        },
        {
            "filePath": "/home/vagrant/projects/browser_extension/src/popup/releaseNotes.js",
            "messages": [],
            "errorCount": 0,
            "warningCount": 0,
            "fixableErrorCount": 0,
            "fixableWarningCount": 0,
            "usedDeprecatedRules": [
                {
                    "ruleId": "no-negated-in-lhs",
                    "replacedBy": [
                        "no-unsafe-negation"
                    ]
                },
                {
                    "ruleId": "valid-jsdoc",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-native-reassign",
                    "replacedBy": [
                        "no-global-assign"
                    ]
                },
                {
                    "ruleId": "no-process-env",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-catch-shadow",
                    "replacedBy": [
                        "no-shadow"
                    ]
                },
                {
                    "ruleId": "callback-return",
                    "replacedBy": []
                },
                {
                    "ruleId": "global-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "handle-callback-err",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-mixed-requires",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-new-require",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-path-concat",
                    "replacedBy": []
                },
                {
                    "ruleId": "no-process-exit",
                    "replacedBy": []
                },
                {
                    "ruleId": "newline-before-return",
                    "replacedBy": [
                        "padding-line-between-statements"
                    ]
                },
                {
                    "ruleId": "no-spaced-func",
                    "replacedBy": [
                        "func-call-spacing"
                    ]
                }
            ]
        }
    ],
    "metadata": {
        "rulesMeta": {
            "accessor-pairs": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce getter and setter pairs in objects and classes",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/accessor-pairs"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "getWithoutSet": {
                                "type": "boolean",
                                "default": false
                            },
                            "setWithoutGet": {
                                "type": "boolean",
                                "default": true
                            },
                            "enforceForClassMembers": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingGetterInPropertyDescriptor": "Getter is not present in property descriptor.",
                    "missingSetterInPropertyDescriptor": "Setter is not present in property descriptor.",
                    "missingGetterInObjectLiteral": "Getter is not present for {{ name }}.",
                    "missingSetterInObjectLiteral": "Setter is not present for {{ name }}.",
                    "missingGetterInClass": "Getter is not present for class {{ name }}.",
                    "missingSetterInClass": "Setter is not present for class {{ name }}."
                }
            },
            "array-bracket-newline": {
                "type": "layout",
                "docs": {
                    "description": "enforce linebreaks after opening and before closing array brackets",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/array-bracket-newline"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consistent"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "multiline": {
                                        "type": "boolean"
                                    },
                                    "minItems": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
                    "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
                    "missingOpeningLinebreak": "A linebreak is required after '['.",
                    "missingClosingLinebreak": "A linebreak is required before ']'."
                }
            },
            "array-bracket-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing inside array brackets",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/array-bracket-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "singleValue": {
                                "type": "boolean"
                            },
                            "objectsInArrays": {
                                "type": "boolean"
                            },
                            "arraysInArrays": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
                }
            },
            "array-callback-return": {
                "type": "problem",
                "docs": {
                    "description": "enforce `return` statements in callbacks of array methods",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/array-callback-return"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowImplicit": {
                                "type": "boolean",
                                "default": false
                            },
                            "checkForEach": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedAtEnd": "{{arrayMethodName}}() expects a value to be returned at the end of {{name}}.",
                    "expectedInside": "{{arrayMethodName}}() expects a return value from {{name}}.",
                    "expectedReturnValue": "{{arrayMethodName}}() expects a return value from {{name}}.",
                    "expectedNoReturnValue": "{{arrayMethodName}}() expects no useless return value from {{name}}."
                }
            },
            "array-element-newline": {
                "type": "layout",
                "docs": {
                    "description": "enforce line breaks after each array element",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/array-element-newline"
                },
                "fixable": "whitespace",
                "schema": {
                    "definitions": {
                        "basicConfig": {
                            "oneOf": [
                                {
                                    "enum": [
                                        "always",
                                        "never",
                                        "consistent"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "multiline": {
                                            "type": "boolean"
                                        },
                                        "minItems": {
                                            "type": [
                                                "integer",
                                                "null"
                                            ],
                                            "minimum": 0
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    },
                    "items": [
                        {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/basicConfig"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "ArrayExpression": {
                                            "$ref": "#/definitions/basicConfig"
                                        },
                                        "ArrayPattern": {
                                            "$ref": "#/definitions/basicConfig"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "minProperties": 1
                                }
                            ]
                        }
                    ]
                },
                "messages": {
                    "unexpectedLineBreak": "There should be no linebreak here.",
                    "missingLineBreak": "There should be a linebreak after this element."
                }
            },
            "arrow-body-style": {
                "type": "suggestion",
                "docs": {
                    "description": "require braces around arrow function bodies",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/arrow-body-style"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "as-needed"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "requireReturnForObjectLiteral": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "unexpectedOtherBlock": "Unexpected block statement surrounding arrow body.",
                    "unexpectedEmptyBlock": "Unexpected block statement surrounding arrow body; put a value of `undefined` immediately after the `=>`.",
                    "unexpectedObjectBlock": "Unexpected block statement surrounding arrow body; parenthesize the returned value and move it immediately after the `=>`.",
                    "unexpectedSingleBlock": "Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.",
                    "expectedBlock": "Expected block statement surrounding arrow body."
                }
            },
            "arrow-parens": {
                "type": "layout",
                "docs": {
                    "description": "require parentheses around arrow function arguments",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/arrow-parens"
                },
                "fixable": "code",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "as-needed"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "requireForBlockBody": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedParens": "Unexpected parentheses around single function argument.",
                    "expectedParens": "Expected parentheses around arrow function argument.",
                    "unexpectedParensInline": "Unexpected parentheses around single function argument having a body with no curly braces.",
                    "expectedParensBlock": "Expected parentheses around arrow function argument having a body with curly braces."
                }
            },
            "arrow-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before and after the arrow in arrow functions",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/arrow-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": true
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Missing space before =>.",
                    "unexpectedBefore": "Unexpected space before =>.",
                    "expectedAfter": "Missing space after =>.",
                    "unexpectedAfter": "Unexpected space after =>."
                }
            },
            "block-scoped-var": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce the use of variables within the scope they are defined",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/block-scoped-var"
                },
                "schema": [],
                "messages": {
                    "outOfScope": "'{{name}}' used outside of binding context."
                }
            },
            "block-spacing": {
                "type": "layout",
                "docs": {
                    "description": "disallow or enforce spaces inside of blocks after opening block and before closing block",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/block-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "missing": "Requires a space {{location}} '{{token}}'.",
                    "extra": "Unexpected space(s) {{location}} '{{token}}'."
                }
            },
            "brace-style": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent brace style for blocks",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/brace-style"
                },
                "schema": [
                    {
                        "enum": [
                            "1tbs",
                            "stroustrup",
                            "allman"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
                    "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
                    "blockSameLine": "Statement inside of curly braces should be on next line.",
                    "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
                    "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
                    "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
                }
            },
            "callback-return": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "require `return` statements after callbacks",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/callback-return"
                },
                "schema": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "messages": {
                    "missingReturn": "Expected return with your callback function."
                }
            },
            "camelcase": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce camelcase naming convention",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/camelcase"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreDestructuring": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreImports": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreGlobals": {
                                "type": "boolean",
                                "default": false
                            },
                            "properties": {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            "allow": {
                                "type": "array",
                                "items": [
                                    {
                                        "type": "string"
                                    }
                                ],
                                "minItems": 0,
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "notCamelCase": "Identifier '{{name}}' is not in camel case."
                }
            },
            "capitalized-comments": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce or disallow capitalization of the first letter of a comment",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/capitalized-comments"
                },
                "fixable": "code",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "ignorePattern": {
                                        "type": "string"
                                    },
                                    "ignoreInlineComments": {
                                        "type": "boolean"
                                    },
                                    "ignoreConsecutiveComments": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "line": {
                                        "type": "object",
                                        "properties": {
                                            "ignorePattern": {
                                                "type": "string"
                                            },
                                            "ignoreInlineComments": {
                                                "type": "boolean"
                                            },
                                            "ignoreConsecutiveComments": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "block": {
                                        "type": "object",
                                        "properties": {
                                            "ignorePattern": {
                                                "type": "string"
                                            },
                                            "ignoreInlineComments": {
                                                "type": "boolean"
                                            },
                                            "ignoreConsecutiveComments": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedLowercaseComment": "Comments should not begin with a lowercase character.",
                    "unexpectedUppercaseComment": "Comments should not begin with an uppercase character."
                }
            },
            "class-methods-use-this": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce that class methods utilize `this`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/class-methods-use-this"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptMethods": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingThis": "Expected 'this' to be used by class {{name}}."
                }
            },
            "comma-dangle": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow trailing commas",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/comma-dangle"
                },
                "fixable": "code",
                "schema": {
                    "definitions": {
                        "value": {
                            "enum": [
                                "always-multiline",
                                "always",
                                "never",
                                "only-multiline"
                            ]
                        },
                        "valueWithIgnore": {
                            "enum": [
                                "always-multiline",
                                "always",
                                "ignore",
                                "never",
                                "only-multiline"
                            ]
                        }
                    },
                    "type": "array",
                    "items": [
                        {
                            "oneOf": [
                                {
                                    "$ref": "#/definitions/value"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "arrays": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "objects": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "imports": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "exports": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        },
                                        "functions": {
                                            "$ref": "#/definitions/valueWithIgnore"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    ]
                },
                "messages": {
                    "unexpected": "Unexpected trailing comma.",
                    "missing": "Missing trailing comma."
                }
            },
            "comma-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before and after commas",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/comma-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missing": "A space is required {{loc}} ','.",
                    "unexpected": "There should be no space {{loc}} ','."
                }
            },
            "comma-style": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent comma style",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/comma-style"
                },
                "fixable": "code",
                "schema": [
                    {
                        "enum": [
                            "first",
                            "last"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
                    "expectedCommaFirst": "',' should be placed first.",
                    "expectedCommaLast": "',' should be placed last."
                }
            },
            "complexity": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum cyclomatic complexity allowed in a program",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/complexity"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "maximum": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "complex": "{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}."
                }
            },
            "computed-property-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing inside computed property brackets",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/computed-property-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "enforceForClassMembers": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
                    "missingSpaceBefore": "A space is required before '{{tokenValue}}'.",
                    "missingSpaceAfter": "A space is required after '{{tokenValue}}'."
                }
            },
            "consistent-return": {
                "type": "suggestion",
                "docs": {
                    "description": "require `return` statements to either always or never specify values",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/consistent-return"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "treatUndefinedAsUnspecified": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingReturn": "Expected to return a value at the end of {{name}}.",
                    "missingReturnValue": "{{name}} expected a return value.",
                    "unexpectedReturnValue": "{{name}} expected no return value."
                }
            },
            "consistent-this": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce consistent naming when capturing the current execution context",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/consistent-this"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "minLength": 1
                    },
                    "uniqueItems": true
                },
                "messages": {
                    "aliasNotAssignedToThis": "Designated alias '{{name}}' is not assigned to 'this'.",
                    "unexpectedAlias": "Unexpected alias '{{name}}' for 'this'."
                }
            },
            "constructor-super": {
                "type": "problem",
                "docs": {
                    "description": "require `super()` calls in constructors",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/constructor-super"
                },
                "schema": [],
                "messages": {
                    "missingSome": "Lacked a call of 'super()' in some code paths.",
                    "missingAll": "Expected to call 'super()'.",
                    "duplicate": "Unexpected duplicate 'super()'.",
                    "badSuper": "Unexpected 'super()' because 'super' is not a constructor.",
                    "unexpected": "Unexpected 'super()'."
                }
            },
            "curly": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce consistent brace style for all control statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/curly"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "all"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "multi",
                                        "multi-line",
                                        "multi-or-nest"
                                    ]
                                },
                                {
                                    "enum": [
                                        "consistent"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "missingCurlyAfter": "Expected { after '{{name}}'.",
                    "missingCurlyAfterCondition": "Expected { after '{{name}}' condition.",
                    "unexpectedCurlyAfter": "Unnecessary { after '{{name}}'.",
                    "unexpectedCurlyAfterCondition": "Unnecessary { after '{{name}}' condition."
                }
            },
            "default-case": {
                "type": "suggestion",
                "docs": {
                    "description": "require `default` cases in `switch` statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/default-case"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commentPattern": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingDefaultCase": "Expected a default case."
                }
            },
            "default-case-last": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce default clauses in switch statements to be last",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/default-case-last"
                },
                "schema": [],
                "messages": {
                    "notLast": "Default clause should be the last clause."
                }
            },
            "default-param-last": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce default parameters to be last",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/default-param-last"
                },
                "schema": [],
                "messages": {
                    "shouldBeLast": "Default parameters should be last."
                }
            },
            "dot-location": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent newlines before and after dots",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/dot-location"
                },
                "schema": [
                    {
                        "enum": [
                            "object",
                            "property"
                        ]
                    }
                ],
                "fixable": "code",
                "messages": {
                    "expectedDotAfterObject": "Expected dot to be on same line as object.",
                    "expectedDotBeforeProperty": "Expected dot to be on same line as property."
                }
            },
            "dot-notation": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce dot notation whenever possible",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/dot-notation"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowKeywords": {
                                "type": "boolean",
                                "default": true
                            },
                            "allowPattern": {
                                "type": "string",
                                "default": ""
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "useDot": "[{{key}}] is better written in dot notation.",
                    "useBrackets": ".{{key}} is a syntax error."
                }
            },
            "eol-last": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow newline at the end of files",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/eol-last"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never",
                            "unix",
                            "windows"
                        ]
                    }
                ],
                "messages": {
                    "missing": "Newline required at end of file but not found.",
                    "unexpected": "Newline not allowed at end of file."
                }
            },
            "eqeqeq": {
                "type": "suggestion",
                "docs": {
                    "description": "require the use of `===` and `!==`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/eqeqeq"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "null": {
                                            "enum": [
                                                "always",
                                                "never",
                                                "ignore"
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "smart",
                                        "allow-null"
                                    ]
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "unexpected": "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'."
                }
            },
            "for-direction": {
                "type": "problem",
                "docs": {
                    "description": "enforce \"for\" loop update clause moving the counter in the right direction.",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/for-direction"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "incorrectDirection": "The update clause in this loop moves the variable in the wrong direction."
                }
            },
            "func-call-spacing": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow spacing between function identifiers and their invocations",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/func-call-spacing"
                },
                "fixable": "whitespace",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "never"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "allowNewlines": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
                    "unexpectedNewline": "Unexpected newline between function name and paren.",
                    "missing": "Missing space between function name and paren."
                }
            },
            "func-name-matching": {
                "type": "suggestion",
                "docs": {
                    "description": "require function names to match the name of the variable or property to which they are assigned",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/func-name-matching"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "considerPropertyDescriptor": {
                                            "type": "boolean"
                                        },
                                        "includeCommonJSModuleExports": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        },
                        {
                            "type": "array",
                            "additionalItems": false,
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "considerPropertyDescriptor": {
                                            "type": "boolean"
                                        },
                                        "includeCommonJSModuleExports": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ]
                        }
                    ]
                },
                "messages": {
                    "matchProperty": "Function name `{{funcName}}` should match property name `{{name}}`.",
                    "matchVariable": "Function name `{{funcName}}` should match variable name `{{name}}`.",
                    "notMatchProperty": "Function name `{{funcName}}` should not match property name `{{name}}`.",
                    "notMatchVariable": "Function name `{{funcName}}` should not match variable name `{{name}}`."
                }
            },
            "func-names": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow named `function` expressions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/func-names"
                },
                "schema": {
                    "definitions": {
                        "value": {
                            "enum": [
                                "always",
                                "as-needed",
                                "never"
                            ]
                        }
                    },
                    "items": [
                        {
                            "$ref": "#/definitions/value"
                        },
                        {
                            "type": "object",
                            "properties": {
                                "generators": {
                                    "$ref": "#/definitions/value"
                                }
                            },
                            "additionalProperties": false
                        }
                    ]
                },
                "messages": {
                    "unnamed": "Unexpected unnamed {{name}}.",
                    "named": "Unexpected named {{name}}."
                }
            },
            "func-style": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce the consistent use of either `function` declarations or expressions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/func-style"
                },
                "schema": [
                    {
                        "enum": [
                            "declaration",
                            "expression"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowArrowFunctions": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expression": "Expected a function expression.",
                    "declaration": "Expected a function declaration."
                }
            },
            "function-call-argument-newline": {
                "type": "layout",
                "docs": {
                    "description": "enforce line breaks between arguments of a function call",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/function-call-argument-newline"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never",
                            "consistent"
                        ]
                    }
                ],
                "messages": {
                    "unexpectedLineBreak": "There should be no line break here.",
                    "missingLineBreak": "There should be a line break after this argument."
                }
            },
            "function-paren-newline": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent line breaks inside function parentheses",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/function-paren-newline"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consistent",
                                    "multiline",
                                    "multiline-arguments"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "minItems": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected newline before ')'.",
                    "expectedAfter": "Expected newline after '('.",
                    "expectedBetween": "Expected newline between arguments/params.",
                    "unexpectedBefore": "Unexpected newline before ')'.",
                    "unexpectedAfter": "Unexpected newline after '('."
                }
            },
            "generator-star-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing around `*` operators in generator functions",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/generator-star-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "before",
                                    "after",
                                    "both",
                                    "neither"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "before": {
                                        "type": "boolean"
                                    },
                                    "after": {
                                        "type": "boolean"
                                    },
                                    "named": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": {
                                                        "type": "boolean"
                                                    },
                                                    "after": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "anonymous": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": {
                                                        "type": "boolean"
                                                    },
                                                    "after": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "method": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "before",
                                                    "after",
                                                    "both",
                                                    "neither"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "before": {
                                                        "type": "boolean"
                                                    },
                                                    "after": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "missingBefore": "Missing space before *.",
                    "missingAfter": "Missing space after *.",
                    "unexpectedBefore": "Unexpected space before *.",
                    "unexpectedAfter": "Unexpected space after *."
                }
            },
            "getter-return": {
                "type": "problem",
                "docs": {
                    "description": "enforce `return` statements in getters",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/getter-return"
                },
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowImplicit": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected to return a value in {{name}}.",
                    "expectedAlways": "Expected {{name}} to always return a value."
                }
            },
            "global-require": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "require `require()` calls to be placed at top-level module scope",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/global-require"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected require()."
                }
            },
            "grouped-accessor-pairs": {
                "type": "suggestion",
                "docs": {
                    "description": "require grouped accessor pairs in object literals and classes",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/grouped-accessor-pairs"
                },
                "schema": [
                    {
                        "enum": [
                            "anyOrder",
                            "getBeforeSet",
                            "setBeforeGet"
                        ]
                    }
                ],
                "messages": {
                    "notGrouped": "Accessor pair {{ formerName }} and {{ latterName }} should be grouped.",
                    "invalidOrder": "Expected {{ latterName }} to be before {{ formerName }}."
                }
            },
            "guard-for-in": {
                "type": "suggestion",
                "docs": {
                    "description": "require `for-in` loops to include an `if` statement",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/guard-for-in"
                },
                "schema": [],
                "messages": {
                    "wrap": "The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype."
                }
            },
            "handle-callback-err": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "require error handling in callbacks",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/handle-callback-err"
                },
                "schema": [
                    {
                        "type": "string"
                    }
                ],
                "messages": {
                    "expected": "Expected error to be handled."
                }
            },
            "id-blacklist": {
                "deprecated": true,
                "replacedBy": [
                    "id-denylist"
                ],
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified identifiers",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/id-blacklist"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "messages": {
                    "restricted": "Identifier '{{name}}' is restricted."
                }
            },
            "id-denylist": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified identifiers",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/id-denylist"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "messages": {
                    "restricted": "Identifier '{{name}}' is restricted."
                }
            },
            "id-length": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce minimum and maximum identifier lengths",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/id-length"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "min": {
                                "type": "integer",
                                "default": 2
                            },
                            "max": {
                                "type": "integer"
                            },
                            "exceptions": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "exceptionPatterns": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "properties": {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "tooShort": "Identifier name '{{name}}' is too short (< {{min}}).",
                    "tooLong": "Identifier name '{{name}}' is too long (> {{max}})."
                }
            },
            "id-match": {
                "type": "suggestion",
                "docs": {
                    "description": "require identifiers to match a specified regular expression",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/id-match"
                },
                "schema": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "properties": {
                                "type": "boolean",
                                "default": false
                            },
                            "onlyDeclarations": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreDestructuring": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "notMatch": "Identifier '{{name}}' does not match the pattern '{{pattern}}'."
                }
            },
            "implicit-arrow-linebreak": {
                "type": "layout",
                "docs": {
                    "description": "enforce the location of arrow function bodies",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/implicit-arrow-linebreak"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "beside",
                            "below"
                        ]
                    }
                ],
                "messages": {
                    "expected": "Expected a linebreak before this expression.",
                    "unexpected": "Expected no linebreak before this expression."
                }
            },
            "indent": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent indentation",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/indent"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "tab"
                                ]
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": {
                                "type": "integer",
                                "minimum": 0,
                                "default": 0
                            },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first",
                                                    "off"
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": [
                                                            "first",
                                                            "off"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "let": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": [
                                                            "first",
                                                            "off"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "const": {
                                                "oneOf": [
                                                    {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    {
                                                        "enum": [
                                                            "first",
                                                            "off"
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "off"
                                        ]
                                    }
                                ]
                            },
                            "MemberExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "off"
                                        ]
                                    }
                                ]
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first",
                                                    "off"
                                                ]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first",
                                                    "off"
                                                ]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "arguments": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first",
                                                    "off"
                                                ]
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "first",
                                            "off"
                                        ]
                                    }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "first",
                                            "off"
                                        ]
                                    }
                                ]
                            },
                            "ImportDeclaration": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "first",
                                            "off"
                                        ]
                                    }
                                ]
                            },
                            "flatTernaryExpressions": {
                                "type": "boolean",
                                "default": false
                            },
                            "offsetTernaryExpressions": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoredNodes": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "not": {
                                        "pattern": ":exit$"
                                    }
                                }
                            },
                            "ignoreComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
                }
            },
            "indent-legacy": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent indentation",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/indent-legacy"
                },
                "deprecated": true,
                "replacedBy": [
                    "indent"
                ],
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "tab"
                                ]
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "SwitchCase": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "VariableDeclarator": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "var": {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            "let": {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            "const": {
                                                "type": "integer",
                                                "minimum": 0
                                            }
                                        }
                                    }
                                ]
                            },
                            "outerIIFEBody": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "MemberExpression": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "FunctionDeclaration": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first"
                                                ]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                }
                            },
                            "FunctionExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first"
                                                ]
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                }
                            },
                            "CallExpression": {
                                "type": "object",
                                "properties": {
                                    "parameters": {
                                        "oneOf": [
                                            {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            {
                                                "enum": [
                                                    "first"
                                                ]
                                            }
                                        ]
                                    }
                                }
                            },
                            "ArrayExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "first"
                                        ]
                                    }
                                ]
                            },
                            "ObjectExpression": {
                                "oneOf": [
                                    {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    {
                                        "enum": [
                                            "first"
                                        ]
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected indentation of {{expected}} but found {{actual}}."
                }
            },
            "init-declarations": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow initialization in variable declarations",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/init-declarations"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "ignoreForLoopInit": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "initialized": "Variable '{{idName}}' should be initialized on declaration.",
                    "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
                }
            },
            "jsx-quotes": {
                "type": "layout",
                "docs": {
                    "description": "enforce the consistent use of either double or single quotes in JSX attributes",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/jsx-quotes"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "prefer-single",
                            "prefer-double"
                        ]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected usage of {{description}}."
                }
            },
            "key-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing between keys and values in object literal properties",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/key-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "align": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    "colon",
                                                    "value"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "mode": {
                                                        "enum": [
                                                            "strict",
                                                            "minimum"
                                                        ]
                                                    },
                                                    "on": {
                                                        "enum": [
                                                            "colon",
                                                            "value"
                                                        ]
                                                    },
                                                    "beforeColon": {
                                                        "type": "boolean"
                                                    },
                                                    "afterColon": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false
                                            }
                                        ]
                                    },
                                    "mode": {
                                        "enum": [
                                            "strict",
                                            "minimum"
                                        ]
                                    },
                                    "beforeColon": {
                                        "type": "boolean"
                                    },
                                    "afterColon": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "singleLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": [
                                                    "strict",
                                                    "minimum"
                                                ]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "multiLine": {
                                        "type": "object",
                                        "properties": {
                                            "align": {
                                                "anyOf": [
                                                    {
                                                        "enum": [
                                                            "colon",
                                                            "value"
                                                        ]
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "mode": {
                                                                "enum": [
                                                                    "strict",
                                                                    "minimum"
                                                                ]
                                                            },
                                                            "on": {
                                                                "enum": [
                                                                    "colon",
                                                                    "value"
                                                                ]
                                                            },
                                                            "beforeColon": {
                                                                "type": "boolean"
                                                            },
                                                            "afterColon": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "additionalProperties": false
                                                    }
                                                ]
                                            },
                                            "mode": {
                                                "enum": [
                                                    "strict",
                                                    "minimum"
                                                ]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "singleLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": [
                                                    "strict",
                                                    "minimum"
                                                ]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "multiLine": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": [
                                                    "strict",
                                                    "minimum"
                                                ]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "align": {
                                        "type": "object",
                                        "properties": {
                                            "mode": {
                                                "enum": [
                                                    "strict",
                                                    "minimum"
                                                ]
                                            },
                                            "on": {
                                                "enum": [
                                                    "colon",
                                                    "value"
                                                ]
                                            },
                                            "beforeColon": {
                                                "type": "boolean"
                                            },
                                            "afterColon": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "extraKey": "Extra space after {{computed}}key '{{key}}'.",
                    "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
                    "missingKey": "Missing space after {{computed}}key '{{key}}'.",
                    "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
                }
            },
            "keyword-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before and after keywords",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/keyword-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": true
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            },
                            "overrides": {
                                "type": "object",
                                "properties": {
                                    "abstract": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "as": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "async": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "await": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "boolean": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "break": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "byte": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "case": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "catch": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "char": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "class": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "const": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "continue": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "debugger": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "default": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "delete": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "do": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "double": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "else": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "enum": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "export": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "extends": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "false": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "final": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "finally": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "float": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "for": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "from": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "function": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "get": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "goto": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "if": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "implements": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "import": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "in": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "instanceof": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "int": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "interface": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "let": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "long": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "native": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "new": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "null": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "of": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "package": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "private": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "protected": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "public": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "return": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "set": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "short": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "static": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "super": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "switch": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "synchronized": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "this": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throw": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "throws": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "transient": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "true": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "try": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "typeof": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "var": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "void": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "volatile": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "while": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "with": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "yield": {
                                        "type": "object",
                                        "properties": {
                                            "before": {
                                                "type": "boolean"
                                            },
                                            "after": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before \"{{value}}\".",
                    "expectedAfter": "Expected space(s) after \"{{value}}\".",
                    "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
                    "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
                }
            },
            "line-comment-position": {
                "type": "layout",
                "docs": {
                    "description": "enforce position of line comments",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/line-comment-position"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "above",
                                    "beside"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "position": {
                                        "enum": [
                                            "above",
                                            "beside"
                                        ]
                                    },
                                    "ignorePattern": {
                                        "type": "string"
                                    },
                                    "applyDefaultPatterns": {
                                        "type": "boolean"
                                    },
                                    "applyDefaultIgnorePatterns": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "above": "Expected comment to be above code.",
                    "beside": "Expected comment to be beside code."
                }
            },
            "linebreak-style": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent linebreak style",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/linebreak-style"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "unix",
                            "windows"
                        ]
                    }
                ],
                "messages": {
                    "expectedLF": "Expected linebreaks to be 'LF' but found 'CRLF'.",
                    "expectedCRLF": "Expected linebreaks to be 'CRLF' but found 'LF'."
                }
            },
            "lines-around-comment": {
                "type": "layout",
                "docs": {
                    "description": "require empty lines around comments",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/lines-around-comment"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "beforeBlockComment": {
                                "type": "boolean",
                                "default": true
                            },
                            "afterBlockComment": {
                                "type": "boolean",
                                "default": false
                            },
                            "beforeLineComment": {
                                "type": "boolean",
                                "default": false
                            },
                            "afterLineComment": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowBlockStart": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowBlockEnd": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowClassStart": {
                                "type": "boolean"
                            },
                            "allowClassEnd": {
                                "type": "boolean"
                            },
                            "allowObjectStart": {
                                "type": "boolean"
                            },
                            "allowObjectEnd": {
                                "type": "boolean"
                            },
                            "allowArrayStart": {
                                "type": "boolean"
                            },
                            "allowArrayEnd": {
                                "type": "boolean"
                            },
                            "ignorePattern": {
                                "type": "string"
                            },
                            "applyDefaultIgnorePatterns": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "after": "Expected line after comment.",
                    "before": "Expected line before comment."
                }
            },
            "lines-around-directive": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow newlines around directives",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/lines-around-directive"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "before": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    },
                                    "after": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 2
                            }
                        ]
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expected": "Expected newline {{location}} \"{{value}}\" directive.",
                    "unexpected": "Unexpected newline {{location}} \"{{value}}\" directive."
                },
                "deprecated": true,
                "replacedBy": [
                    "padding-line-between-statements"
                ]
            },
            "lines-between-class-members": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow an empty line between class members",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/lines-between-class-members"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptAfterSingleLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "never": "Unexpected blank line between class members.",
                    "always": "Expected blank line between class members."
                }
            },
            "max-classes-per-file": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum number of classes per file",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-classes-per-file"
                },
                "schema": [
                    {
                        "type": "integer",
                        "minimum": 1
                    }
                ],
                "messages": {
                    "maximumExceeded": "File has too many classes ({{ classCount }}). Maximum allowed is {{ max }}."
                }
            },
            "max-depth": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum depth that blocks can be nested",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-depth"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "maximum": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "tooDeeply": "Blocks are nested too deeply ({{depth}}). Maximum allowed is {{maxDepth}}."
                }
            },
            "max-len": {
                "type": "layout",
                "docs": {
                    "description": "enforce a maximum line length",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-len"
                },
                "schema": [
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "comments": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "tabWidth": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "ignorePattern": {
                                        "type": "string"
                                    },
                                    "ignoreComments": {
                                        "type": "boolean"
                                    },
                                    "ignoreStrings": {
                                        "type": "boolean"
                                    },
                                    "ignoreUrls": {
                                        "type": "boolean"
                                    },
                                    "ignoreTemplateLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreRegExpLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreTrailingComments": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "code": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "comments": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "tabWidth": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "ignorePattern": {
                                        "type": "string"
                                    },
                                    "ignoreComments": {
                                        "type": "boolean"
                                    },
                                    "ignoreStrings": {
                                        "type": "boolean"
                                    },
                                    "ignoreUrls": {
                                        "type": "boolean"
                                    },
                                    "ignoreTemplateLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreRegExpLiterals": {
                                        "type": "boolean"
                                    },
                                    "ignoreTrailingComments": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "integer",
                                "minimum": 0
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "comments": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "tabWidth": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "ignorePattern": {
                                "type": "string"
                            },
                            "ignoreComments": {
                                "type": "boolean"
                            },
                            "ignoreStrings": {
                                "type": "boolean"
                            },
                            "ignoreUrls": {
                                "type": "boolean"
                            },
                            "ignoreTemplateLiterals": {
                                "type": "boolean"
                            },
                            "ignoreRegExpLiterals": {
                                "type": "boolean"
                            },
                            "ignoreTrailingComments": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
                    "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
                }
            },
            "max-lines": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum number of lines per file",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-lines"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "skipComments": {
                                        "type": "boolean"
                                    },
                                    "skipBlankLines": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "exceed": "File has too many lines ({{actual}}). Maximum allowed is {{max}}."
                }
            },
            "max-lines-per-function": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum number of line of code in a function",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-lines-per-function"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "skipComments": {
                                        "type": "boolean"
                                    },
                                    "skipBlankLines": {
                                        "type": "boolean"
                                    },
                                    "IIFEs": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "integer",
                                "minimum": 1
                            }
                        ]
                    }
                ],
                "messages": {
                    "exceed": "{{name}} has too many lines ({{lineCount}}). Maximum allowed is {{maxLines}}."
                }
            },
            "max-nested-callbacks": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum depth that callbacks can be nested",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-nested-callbacks"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "maximum": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "exceed": "Too many nested callbacks ({{num}}). Maximum allowed is {{max}}."
                }
            },
            "max-params": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum number of parameters in function definitions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-params"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "maximum": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "exceed": "{{name}} has too many parameters ({{count}}). Maximum allowed is {{max}}."
                }
            },
            "max-statements": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a maximum number of statements allowed in function blocks",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-statements"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "integer",
                                "minimum": 0
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "maximum": {
                                        "type": "integer",
                                        "minimum": 0
                                    },
                                    "max": {
                                        "type": "integer",
                                        "minimum": 0
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "ignoreTopLevelFunctions": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "exceed": "{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}."
                }
            },
            "max-statements-per-line": {
                "type": "layout",
                "docs": {
                    "description": "enforce a maximum number of statements allowed per line",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/max-statements-per-line"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "max": {
                                "type": "integer",
                                "minimum": 1,
                                "default": 1
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "exceed": "This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}."
                }
            },
            "multiline-comment-style": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce a particular style for multiline comments",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/multiline-comment-style"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "starred-block",
                            "separate-lines",
                            "bare-block"
                        ]
                    }
                ],
                "messages": {
                    "expectedBlock": "Expected a block comment instead of consecutive line comments.",
                    "expectedBareBlock": "Expected a block comment without padding stars.",
                    "startNewline": "Expected a linebreak after '/*'.",
                    "endNewline": "Expected a linebreak before '*/'.",
                    "missingStar": "Expected a '*' at the start of this line.",
                    "alignment": "Expected this line to be aligned with the start of the comment.",
                    "expectedLines": "Expected multiple line comments instead of a block comment."
                }
            },
            "multiline-ternary": {
                "type": "layout",
                "docs": {
                    "description": "enforce newlines between operands of ternary expressions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/multiline-ternary"
                },
                "schema": [
                    {
                        "enum": [
                            "always",
                            "always-multiline",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
                    "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
                    "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
                    "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
                }
            },
            "new-cap": {
                "type": "suggestion",
                "docs": {
                    "description": "require constructor names to begin with a capital letter",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/new-cap"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "newIsCap": {
                                "type": "boolean",
                                "default": true
                            },
                            "capIsNew": {
                                "type": "boolean",
                                "default": true
                            },
                            "newIsCapExceptions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "newIsCapExceptionPattern": {
                                "type": "string"
                            },
                            "capIsNewExceptions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "capIsNewExceptionPattern": {
                                "type": "string"
                            },
                            "properties": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "upper": "A function with a name starting with an uppercase letter should only be used as a constructor.",
                    "lower": "A constructor name should not start with a lowercase letter."
                }
            },
            "new-parens": {
                "type": "layout",
                "docs": {
                    "description": "enforce or disallow parentheses when invoking a constructor with no arguments",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/new-parens"
                },
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "never"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        }
                    ]
                },
                "messages": {
                    "missing": "Missing '()' invoking a constructor.",
                    "unnecessary": "Unnecessary '()' invoking a constructor with no arguments."
                }
            },
            "newline-after-var": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow an empty line after variable declarations",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/newline-after-var"
                },
                "schema": [
                    {
                        "enum": [
                            "never",
                            "always"
                        ]
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expected": "Expected blank line after variable declarations.",
                    "unexpected": "Unexpected blank line after variable declarations."
                },
                "deprecated": true,
                "replacedBy": [
                    "padding-line-between-statements"
                ]
            },
            "newline-before-return": {
                "type": "layout",
                "docs": {
                    "description": "require an empty line before `return` statements",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/newline-before-return"
                },
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "expected": "Expected newline before return statement."
                },
                "deprecated": true,
                "replacedBy": [
                    "padding-line-between-statements"
                ]
            },
            "newline-per-chained-call": {
                "type": "layout",
                "docs": {
                    "description": "require a newline after each call in a method chain",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/newline-per-chained-call"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreChainWithDepth": {
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 10,
                                "default": 2
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expected": "Expected line break before `{{callee}}`."
                }
            },
            "no-alert": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `alert`, `confirm`, and `prompt`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-alert"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected {{name}}."
                }
            },
            "no-array-constructor": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `Array` constructors",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-array-constructor"
                },
                "schema": [],
                "messages": {
                    "preferLiteral": "The array literal notation [] is preferable."
                }
            },
            "no-async-promise-executor": {
                "type": "problem",
                "docs": {
                    "description": "disallow using an async function as a Promise executor",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-async-promise-executor"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "async": "Promise executor functions should not be async."
                }
            },
            "no-await-in-loop": {
                "type": "problem",
                "docs": {
                    "description": "disallow `await` inside of loops",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-await-in-loop"
                },
                "schema": [],
                "messages": {
                    "unexpectedAwait": "Unexpected `await` inside a loop."
                }
            },
            "no-bitwise": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow bitwise operators",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-bitwise"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "^",
                                        "|",
                                        "&",
                                        "<<",
                                        ">>",
                                        ">>>",
                                        "^=",
                                        "|=",
                                        "&=",
                                        "<<=",
                                        ">>=",
                                        ">>>=",
                                        "~"
                                    ]
                                },
                                "uniqueItems": true
                            },
                            "int32Hint": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected use of '{{operator}}'."
                }
            },
            "no-buffer-constructor": {
                "deprecated": true,
                "replacedBy": [],
                "type": "problem",
                "docs": {
                    "description": "disallow use of the `Buffer()` constructor",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-buffer-constructor"
                },
                "schema": [],
                "messages": {
                    "deprecated": "{{expr}} is deprecated. Use Buffer.from(), Buffer.alloc(), or Buffer.allocUnsafe() instead."
                }
            },
            "no-caller": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `arguments.caller` or `arguments.callee`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-caller"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Avoid arguments.{{prop}}."
                }
            },
            "no-case-declarations": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow lexical declarations in case clauses",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-case-declarations"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected lexical declaration in case block."
                }
            },
            "no-catch-shadow": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `catch` clause parameters from shadowing variables in the outer scope",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-catch-shadow"
                },
                "replacedBy": [
                    "no-shadow"
                ],
                "deprecated": true,
                "schema": [],
                "messages": {
                    "mutable": "Value of '{{name}}' may be overwritten in IE 8 and earlier."
                }
            },
            "no-class-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow reassigning class members",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-class-assign"
                },
                "schema": [],
                "messages": {
                    "class": "'{{name}}' is a class."
                }
            },
            "no-compare-neg-zero": {
                "type": "problem",
                "docs": {
                    "description": "disallow comparing against -0",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-compare-neg-zero"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "unexpected": "Do not use the '{{operator}}' operator to compare against -0."
                }
            },
            "no-cond-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow assignment operators in conditional expressions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-cond-assign"
                },
                "schema": [
                    {
                        "enum": [
                            "except-parens",
                            "always"
                        ]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected assignment within {{type}}.",
                    "missing": "Expected a conditional expression and instead saw an assignment."
                }
            },
            "no-confusing-arrow": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow arrow functions where they could be confused with comparisons",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-confusing-arrow"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowParens": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "confusing": "Arrow function used ambiguously with a conditional expression."
                }
            },
            "no-console": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `console`",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-console"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "minItems": 1,
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected console statement."
                }
            },
            "no-const-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow reassigning `const` variables",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-const-assign"
                },
                "schema": [],
                "messages": {
                    "const": "'{{name}}' is constant."
                }
            },
            "no-constant-condition": {
                "type": "problem",
                "docs": {
                    "description": "disallow constant expressions in conditions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-constant-condition"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "checkLoops": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected constant condition."
                }
            },
            "no-constructor-return": {
                "type": "problem",
                "docs": {
                    "description": "disallow returning value from constructor",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-constructor-return"
                },
                "schema": {},
                "fixable": null,
                "messages": {
                    "unexpected": "Unexpected return statement in constructor."
                }
            },
            "no-continue": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `continue` statements",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-continue"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected use of continue statement."
                }
            },
            "no-control-regex": {
                "type": "problem",
                "docs": {
                    "description": "disallow control characters in regular expressions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-control-regex"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected control character(s) in regular expression: {{controlChars}}."
                }
            },
            "no-debugger": {
                "type": "problem",
                "docs": {
                    "description": "disallow the use of `debugger`",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-debugger"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected 'debugger' statement."
                }
            },
            "no-delete-var": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow deleting variables",
                    "category": "Variables",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-delete-var"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Variables should not be deleted."
                }
            },
            "no-div-regex": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow division operators explicitly at the beginning of regular expressions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-div-regex"
                },
                "fixable": "code",
                "schema": [],
                "messages": {
                    "unexpected": "A regular expression literal can be confused with '/='."
                }
            },
            "no-dupe-args": {
                "type": "problem",
                "docs": {
                    "description": "disallow duplicate arguments in `function` definitions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-dupe-args"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate param '{{name}}'."
                }
            },
            "no-dupe-class-members": {
                "type": "problem",
                "docs": {
                    "description": "disallow duplicate class members",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-dupe-class-members"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate name '{{name}}'."
                }
            },
            "no-dupe-else-if": {
                "type": "problem",
                "docs": {
                    "description": "disallow duplicate conditions in if-else-if chains",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-dupe-else-if"
                },
                "schema": [],
                "messages": {
                    "unexpected": "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the if-else-if chain."
                }
            },
            "no-dupe-keys": {
                "type": "problem",
                "docs": {
                    "description": "disallow duplicate keys in object literals",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-dupe-keys"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate key '{{name}}'."
                }
            },
            "no-duplicate-case": {
                "type": "problem",
                "docs": {
                    "description": "disallow duplicate case labels",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-duplicate-case"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Duplicate case label."
                }
            },
            "no-duplicate-imports": {
                "type": "problem",
                "docs": {
                    "description": "disallow duplicate module imports",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-duplicate-imports"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "includeExports": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "import": "'{{module}}' import is duplicated.",
                    "importAs": "'{{module}}' import is duplicated as export.",
                    "export": "'{{module}}' export is duplicated.",
                    "exportAs": "'{{module}}' export is duplicated as import."
                }
            },
            "no-else-return": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `else` blocks after `return` statements in `if` statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-else-return"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowElseIf": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "unexpected": "Unnecessary 'else' after 'return'."
                }
            },
            "no-empty": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow empty block statements",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-empty"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowEmptyCatch": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Empty {{type}} statement."
                }
            },
            "no-empty-character-class": {
                "type": "problem",
                "docs": {
                    "description": "disallow empty character classes in regular expressions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-empty-character-class"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Empty class."
                }
            },
            "no-empty-function": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow empty functions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-empty-function"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "functions",
                                        "arrowFunctions",
                                        "generatorFunctions",
                                        "methods",
                                        "generatorMethods",
                                        "getters",
                                        "setters",
                                        "constructors",
                                        "asyncFunctions",
                                        "asyncMethods"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected empty {{name}}."
                }
            },
            "no-empty-pattern": {
                "type": "problem",
                "docs": {
                    "description": "disallow empty destructuring patterns",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-empty-pattern"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected empty {{type}} pattern."
                }
            },
            "no-eq-null": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `null` comparisons without type-checking operators",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-eq-null"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Use '===' to compare with null."
                }
            },
            "no-eval": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `eval()`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-eval"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowIndirect": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "eval can be harmful."
                }
            },
            "no-ex-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow reassigning exceptions in `catch` clauses",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-ex-assign"
                },
                "schema": [],
                "messages": {
                    "unexpected": "Do not assign to the exception parameter."
                }
            },
            "no-extend-native": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow extending native types",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-extend-native"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpected": "{{builtin}} prototype is read only, properties should not be added."
                }
            },
            "no-extra-bind": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary calls to `.bind()`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-extra-bind"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpected": "The function binding is unnecessary."
                }
            },
            "no-extra-boolean-cast": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary boolean casts",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-extra-boolean-cast"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForLogicalOperands": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "unexpectedCall": "Redundant Boolean call.",
                    "unexpectedNegation": "Redundant double negation."
                }
            },
            "no-extra-label": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary labels",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-extra-label"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpected": "This label '{{name}}' is unnecessary."
                }
            },
            "no-extra-parens": {
                "type": "layout",
                "docs": {
                    "description": "disallow unnecessary parentheses",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-extra-parens"
                },
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "functions"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "all"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "conditionalAssign": {
                                            "type": "boolean"
                                        },
                                        "nestedBinaryExpressions": {
                                            "type": "boolean"
                                        },
                                        "returnAssign": {
                                            "type": "boolean"
                                        },
                                        "ignoreJSX": {
                                            "enum": [
                                                "none",
                                                "all",
                                                "single-line",
                                                "multi-line"
                                            ]
                                        },
                                        "enforceForArrowConditionals": {
                                            "type": "boolean"
                                        },
                                        "enforceForSequenceExpressions": {
                                            "type": "boolean"
                                        },
                                        "enforceForNewInMemberExpressions": {
                                            "type": "boolean"
                                        },
                                        "enforceForFunctionPrototypeMethods": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "unexpected": "Unnecessary parentheses around expression."
                }
            },
            "no-extra-semi": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary semicolons",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-extra-semi"
                },
                "fixable": "code",
                "schema": [],
                "messages": {
                    "unexpected": "Unnecessary semicolon."
                }
            },
            "no-fallthrough": {
                "type": "problem",
                "docs": {
                    "description": "disallow fallthrough of `case` statements",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-fallthrough"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commentPattern": {
                                "type": "string",
                                "default": ""
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "case": "Expected a 'break' statement before 'case'.",
                    "default": "Expected a 'break' statement before 'default'."
                }
            },
            "no-floating-decimal": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow leading or trailing decimal points in numeric literals",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-floating-decimal"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "leading": "A leading decimal point can be confused with a dot.",
                    "trailing": "A trailing decimal point can be confused with a dot."
                }
            },
            "no-func-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow reassigning `function` declarations",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-func-assign"
                },
                "schema": [],
                "messages": {
                    "isAFunction": "'{{name}}' is a function."
                }
            },
            "no-global-assign": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow assignments to native objects or read-only global variables",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-global-assign"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "globalShouldNotBeModified": "Read-only global '{{name}}' should not be modified."
                }
            },
            "no-implicit-coercion": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow shorthand type conversions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-implicit-coercion"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "boolean": {
                                "type": "boolean",
                                "default": true
                            },
                            "number": {
                                "type": "boolean",
                                "default": true
                            },
                            "string": {
                                "type": "boolean",
                                "default": true
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "~",
                                        "!!",
                                        "+",
                                        "*"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useRecommendation": "use `{{recommendation}}` instead."
                }
            },
            "no-implicit-globals": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow declarations in the global scope",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-implicit-globals"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "lexicalBindings": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "globalNonLexicalBinding": "Unexpected {{kind}} declaration in the global scope, wrap in an IIFE for a local variable, assign as global property for a global variable.",
                    "globalLexicalBinding": "Unexpected {{kind}} declaration in the global scope, wrap in a block or in an IIFE.",
                    "globalVariableLeak": "Global variable leak, declare the variable if it is intended to be local.",
                    "assignmentToReadonlyGlobal": "Unexpected assignment to read-only global variable.",
                    "redeclarationOfReadonlyGlobal": "Unexpected redeclaration of read-only global variable."
                }
            },
            "no-implied-eval": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `eval()`-like methods",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-implied-eval"
                },
                "schema": [],
                "messages": {
                    "impliedEval": "Implied eval. Consider passing a function instead of a string."
                }
            },
            "no-import-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow assigning to imported bindings",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-import-assign"
                },
                "schema": [],
                "messages": {
                    "readonly": "'{{name}}' is read-only.",
                    "readonlyMember": "The members of '{{name}}' are read-only."
                }
            },
            "no-inline-comments": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow inline comments after code",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-inline-comments"
                },
                "schema": [],
                "messages": {
                    "unexpectedInlineComment": "Unexpected comment inline with code."
                }
            },
            "no-inner-declarations": {
                "type": "problem",
                "docs": {
                    "description": "disallow variable or `function` declarations in nested blocks",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-inner-declarations"
                },
                "schema": [
                    {
                        "enum": [
                            "functions",
                            "both"
                        ]
                    }
                ],
                "messages": {
                    "moveDeclToRoot": "Move {{type}} declaration to {{body}} root."
                }
            },
            "no-invalid-regexp": {
                "type": "problem",
                "docs": {
                    "description": "disallow invalid regular expression strings in `RegExp` constructors",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-invalid-regexp"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowConstructorFlags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "regexMessage": "{{message}}."
                }
            },
            "no-invalid-this": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `this` keywords outside of classes or class-like objects",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-invalid-this"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "capIsConstructor": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedThis": "Unexpected 'this'."
                }
            },
            "no-irregular-whitespace": {
                "type": "problem",
                "docs": {
                    "description": "disallow irregular whitespace",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-irregular-whitespace"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "skipComments": {
                                "type": "boolean",
                                "default": false
                            },
                            "skipStrings": {
                                "type": "boolean",
                                "default": true
                            },
                            "skipTemplates": {
                                "type": "boolean",
                                "default": false
                            },
                            "skipRegExps": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noIrregularWhitespace": "Irregular whitespace not allowed."
                }
            },
            "no-iterator": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of the `__iterator__` property",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-iterator"
                },
                "schema": [],
                "messages": {
                    "noIterator": "Reserved name '__iterator__'."
                }
            },
            "no-label-var": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow labels that share a name with a variable",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-label-var"
                },
                "schema": [],
                "messages": {
                    "identifierClashWithLabel": "Found identifier with same name as label."
                }
            },
            "no-labels": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow labeled statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-labels"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowLoop": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowSwitch": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedLabel": "Unexpected labeled statement.",
                    "unexpectedLabelInBreak": "Unexpected label in break statement.",
                    "unexpectedLabelInContinue": "Unexpected label in continue statement."
                }
            },
            "no-lone-blocks": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary nested blocks",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-lone-blocks"
                },
                "schema": [],
                "messages": {
                    "redundantBlock": "Block is redundant.",
                    "redundantNestedBlock": "Nested block is redundant."
                }
            },
            "no-lonely-if": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `if` statements as the only statement in `else` blocks",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-lonely-if"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpectedLonelyIf": "Unexpected if as the only statement in an else block."
                }
            },
            "no-loop-func": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow function declarations that contain unsafe references inside loop statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-loop-func"
                },
                "schema": [],
                "messages": {
                    "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
                }
            },
            "no-loss-of-precision": {
                "type": "problem",
                "docs": {
                    "description": "disallow literal numbers that lose precision",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-loss-of-precision"
                },
                "schema": [],
                "messages": {
                    "noLossOfPrecision": "This number literal will lose precision at runtime."
                }
            },
            "no-magic-numbers": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow magic numbers",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-magic-numbers"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "detectObjects": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceConst": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignore": {
                                "type": "array",
                                "items": {
                                    "anyOf": [
                                        {
                                            "type": "number"
                                        },
                                        {
                                            "type": "string",
                                            "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                                        }
                                    ]
                                },
                                "uniqueItems": true
                            },
                            "ignoreArrayIndexes": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreDefaultValues": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useConst": "Number constants declarations must use 'const'.",
                    "noMagic": "No magic number: {{raw}}."
                }
            },
            "no-misleading-character-class": {
                "type": "problem",
                "docs": {
                    "description": "disallow characters which are made with multiple code points in character class syntax",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-misleading-character-class"
                },
                "schema": [],
                "messages": {
                    "surrogatePairWithoutUFlag": "Unexpected surrogate pair in character class. Use 'u' flag.",
                    "combiningClass": "Unexpected combined character in character class.",
                    "emojiModifier": "Unexpected modified Emoji in character class.",
                    "regionalIndicatorSymbol": "Unexpected national flag in character class.",
                    "zwj": "Unexpected joined character sequence in character class."
                }
            },
            "no-mixed-operators": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow mixed binary operators",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-mixed-operators"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array",
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "enum": [
                                            "+",
                                            "-",
                                            "*",
                                            "/",
                                            "%",
                                            "**",
                                            "&",
                                            "|",
                                            "^",
                                            "~",
                                            "<<",
                                            ">>",
                                            ">>>",
                                            "==",
                                            "!=",
                                            "===",
                                            "!==",
                                            ">",
                                            ">=",
                                            "<",
                                            "<=",
                                            "&&",
                                            "||",
                                            "in",
                                            "instanceof",
                                            "?:",
                                            "??"
                                        ]
                                    },
                                    "minItems": 2,
                                    "uniqueItems": true
                                },
                                "uniqueItems": true
                            },
                            "allowSamePrecedence": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedMixedOperator": "Unexpected mix of '{{leftOperator}}' and '{{rightOperator}}'."
                }
            },
            "no-mixed-requires": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow `require` calls to be mixed with regular variable declarations",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-mixed-requires"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "grouping": {
                                        "type": "boolean"
                                    },
                                    "allowCall": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "noMixRequire": "Do not mix 'require' and other declarations.",
                    "noMixCoreModuleFileComputed": "Do not mix core, module, file and computed requires."
                }
            },
            "no-mixed-spaces-and-tabs": {
                "type": "layout",
                "docs": {
                    "description": "disallow mixed spaces and tabs for indentation",
                    "category": "Stylistic Issues",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-mixed-spaces-and-tabs"
                },
                "schema": [
                    {
                        "enum": [
                            "smart-tabs",
                            true,
                            false
                        ]
                    }
                ],
                "messages": {
                    "mixedSpacesAndTabs": "Mixed spaces and tabs."
                }
            },
            "no-multi-assign": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow use of chained assignment expressions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-multi-assign"
                },
                "schema": [],
                "messages": {
                    "unexpectedChain": "Unexpected chained assignment."
                }
            },
            "no-multi-spaces": {
                "type": "layout",
                "docs": {
                    "description": "disallow multiple spaces",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-multi-spaces"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "object",
                                "patternProperties": {
                                    "^([A-Z][a-z]*)+$": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            },
                            "ignoreEOLComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "multipleSpaces": "Multiple spaces found before '{{displayValue}}'."
                }
            },
            "no-multi-str": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow multiline strings",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-multi-str"
                },
                "schema": [],
                "messages": {
                    "multilineString": "Multiline support is limited to browsers supporting ES5 only."
                }
            },
            "no-multiple-empty-lines": {
                "type": "layout",
                "docs": {
                    "description": "disallow multiple empty lines",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-multiple-empty-lines"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "max": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "maxEOF": {
                                "type": "integer",
                                "minimum": 0
                            },
                            "maxBOF": {
                                "type": "integer",
                                "minimum": 0
                            }
                        },
                        "required": [
                            "max"
                        ],
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "blankBeginningOfFile": "Too many blank lines at the beginning of file. Max of {{max}} allowed.",
                    "blankEndOfFile": "Too many blank lines at the end of file. Max of {{max}} allowed.",
                    "consecutiveBlank": "More than {{max}} blank {{pluralizedLines}} not allowed."
                }
            },
            "no-native-reassign": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow assignments to native objects or read-only global variables",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-native-reassign"
                },
                "deprecated": true,
                "replacedBy": [
                    "no-global-assign"
                ],
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "nativeReassign": "Read-only global '{{name}}' should not be modified."
                }
            },
            "no-negated-condition": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow negated conditions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-negated-condition"
                },
                "schema": [],
                "messages": {
                    "unexpectedNegated": "Unexpected negated condition."
                }
            },
            "no-negated-in-lhs": {
                "type": "problem",
                "docs": {
                    "description": "disallow negating the left operand in `in` expressions",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-negated-in-lhs"
                },
                "replacedBy": [
                    "no-unsafe-negation"
                ],
                "deprecated": true,
                "schema": [],
                "messages": {
                    "negatedLHS": "The 'in' expression's left operand is negated."
                }
            },
            "no-nested-ternary": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow nested ternary expressions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-nested-ternary"
                },
                "schema": [],
                "messages": {
                    "noNestedTernary": "Do not nest ternary expressions."
                }
            },
            "no-new": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `new` operators outside of assignments or comparisons",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-new"
                },
                "schema": [],
                "messages": {
                    "noNewStatement": "Do not use 'new' for side effects."
                }
            },
            "no-new-func": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `new` operators with the `Function` object",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-new-func"
                },
                "schema": [],
                "messages": {
                    "noFunctionConstructor": "The Function constructor is eval."
                }
            },
            "no-new-object": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `Object` constructors",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-new-object"
                },
                "schema": [],
                "messages": {
                    "preferLiteral": "The object literal notation {} is preferrable."
                }
            },
            "no-new-require": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow `new` operators with calls to `require`",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-new-require"
                },
                "schema": [],
                "messages": {
                    "noNewRequire": "Unexpected use of new with require."
                }
            },
            "no-new-symbol": {
                "type": "problem",
                "docs": {
                    "description": "disallow `new` operators with the `Symbol` object",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-new-symbol"
                },
                "schema": [],
                "messages": {
                    "noNewSymbol": "`Symbol` cannot be called as a constructor."
                }
            },
            "no-new-wrappers": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-new-wrappers"
                },
                "schema": [],
                "messages": {
                    "noConstructor": "Do not use {{fn}} as a constructor."
                }
            },
            "no-obj-calls": {
                "type": "problem",
                "docs": {
                    "description": "disallow calling global object properties as functions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-obj-calls"
                },
                "schema": [],
                "messages": {
                    "unexpectedCall": "'{{name}}' is not a function.",
                    "unexpectedRefCall": "'{{name}}' is reference to '{{ref}}', which is not a function."
                }
            },
            "no-octal": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow octal literals",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-octal"
                },
                "schema": [],
                "messages": {
                    "noOcatal": "Octal literals should not be used."
                }
            },
            "no-octal-escape": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow octal escape sequences in string literals",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-octal-escape"
                },
                "schema": [],
                "messages": {
                    "octalEscapeSequence": "Don't use octal: '\\{{sequence}}'. Use '\\u....' instead."
                }
            },
            "no-param-reassign": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow reassigning `function` parameters",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-param-reassign"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "props": {
                                        "enum": [
                                            false
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "props": {
                                        "enum": [
                                            true
                                        ]
                                    },
                                    "ignorePropertyModificationsFor": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    },
                                    "ignorePropertyModificationsForRegex": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "assignmentToFunctionParam": "Assignment to function parameter '{{name}}'.",
                    "assignmentToFunctionParamProp": "Assignment to property of function parameter '{{name}}'."
                }
            },
            "no-path-concat": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow string concatenation with `__dirname` and `__filename`",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-path-concat"
                },
                "schema": [],
                "messages": {
                    "usePathFunctions": "Use path.join() or path.resolve() instead of + to create paths."
                }
            },
            "no-plusplus": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the unary operators `++` and `--`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-plusplus"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowForLoopAfterthoughts": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedUnaryOp": "Unary operator '{{operator}}' used."
                }
            },
            "no-process-env": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `process.env`",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-process-env"
                },
                "schema": [],
                "messages": {
                    "unexpectedProcessEnv": "Unexpected use of process.env."
                }
            },
            "no-process-exit": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `process.exit()`",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-process-exit"
                },
                "schema": [],
                "messages": {
                    "noProcessExit": "Don't use process.exit(); throw an error instead."
                }
            },
            "no-promise-executor-return": {
                "type": "problem",
                "docs": {
                    "description": "disallow returning values from Promise executor functions",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-promise-executor-return"
                },
                "schema": [],
                "messages": {
                    "returnsValue": "Return values from promise executor functions cannot be read."
                }
            },
            "no-proto": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of the `__proto__` property",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-proto"
                },
                "schema": [],
                "messages": {
                    "unexpectedProto": "The '__proto__' property is deprecated."
                }
            },
            "no-prototype-builtins": {
                "type": "problem",
                "docs": {
                    "description": "disallow calling some `Object.prototype` methods directly on objects",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-prototype-builtins"
                },
                "schema": [],
                "messages": {
                    "prototypeBuildIn": "Do not access Object.prototype method '{{prop}}' from target object."
                }
            },
            "no-redeclare": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow variable redeclaration",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-redeclare"
                },
                "messages": {
                    "redeclared": "'{{id}}' is already defined.",
                    "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
                    "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "no-regex-spaces": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow multiple spaces in regular expressions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-regex-spaces"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "multipleSpaces": "Spaces are hard to count. Use {{{length}}}."
                }
            },
            "no-restricted-exports": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified names in exports",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-restricted-exports"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "restrictedNamedExports": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "restrictedNamed": "'{{name}}' is restricted from being used as an exported name."
                }
            },
            "no-restricted-globals": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified global variables",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-restricted-globals"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "uniqueItems": true,
                    "minItems": 0
                },
                "messages": {
                    "defaultMessage": "Unexpected use of '{{name}}'.",
                    "customMessage": "Unexpected use of '{{name}}'. {{customMessage}}"
                }
            },
            "no-restricted-imports": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified modules when loaded by `import`",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-restricted-imports"
                },
                "messages": {
                    "path": "'{{importSource}}' import is restricted from being used.",
                    "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
                    "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
                    "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
                    "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
                    "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
                    "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "message": {
                                                "type": "string",
                                                "minLength": 1
                                            },
                                            "importNames": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "name"
                                        ]
                                    }
                                ]
                            },
                            "uniqueItems": true
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "paths": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "type": "string"
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "name": {
                                                                "type": "string"
                                                            },
                                                            "message": {
                                                                "type": "string",
                                                                "minLength": 1
                                                            },
                                                            "importNames": {
                                                                "type": "array",
                                                                "items": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        },
                                                        "additionalProperties": false,
                                                        "required": [
                                                            "name"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "uniqueItems": true
                                        },
                                        "patterns": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "uniqueItems": true
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                }
            },
            "no-restricted-modules": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified modules when loaded by `require`",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-restricted-modules"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "message": {
                                                "type": "string",
                                                "minLength": 1
                                            }
                                        },
                                        "additionalProperties": false,
                                        "required": [
                                            "name"
                                        ]
                                    }
                                ]
                            },
                            "uniqueItems": true
                        },
                        {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "paths": {
                                        "type": "array",
                                        "items": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "message": {
                                                            "type": "string",
                                                            "minLength": 1
                                                        }
                                                    },
                                                    "additionalProperties": false,
                                                    "required": [
                                                        "name"
                                                    ]
                                                }
                                            ]
                                        },
                                        "uniqueItems": true
                                    },
                                    "patterns": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "additionalProperties": false
                            },
                            "additionalItems": false
                        }
                    ]
                },
                "messages": {
                    "defaultMessage": "'{{name}}' module is restricted from being used.",
                    "customMessage": "'{{name}}' module is restricted from being used. {{customMessage}}",
                    "patternMessage": "'{{name}}' module is restricted from being used by a pattern."
                }
            },
            "no-restricted-properties": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow certain properties on certain objects",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-restricted-properties"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "anyOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "object": {
                                        "type": "string"
                                    },
                                    "property": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "object"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "object": {
                                        "type": "string"
                                    },
                                    "property": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false,
                                "required": [
                                    "property"
                                ]
                            }
                        ]
                    },
                    "uniqueItems": true
                },
                "messages": {
                    "restrictedObjectProperty": "'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}",
                    "restrictedProperty": "'{{propertyName}}' is restricted from being used.{{message}}"
                }
            },
            "no-restricted-syntax": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified syntax",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-restricted-syntax"
                },
                "schema": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "selector": {
                                        "type": "string"
                                    },
                                    "message": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "selector"
                                ],
                                "additionalProperties": false
                            }
                        ]
                    },
                    "uniqueItems": true,
                    "minItems": 0
                },
                "messages": {
                    "restrictedSyntax": "{{message}}"
                }
            },
            "no-return-assign": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow assignment operators in `return` statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-return-assign"
                },
                "schema": [
                    {
                        "enum": [
                            "except-parens",
                            "always"
                        ]
                    }
                ],
                "messages": {
                    "returnAssignment": "Return statement should not contain assignment.",
                    "arrowAssignment": "Arrow function should not return assignment."
                }
            },
            "no-return-await": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary `return await`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-return-await"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "redundantUseOfAwait": "Redundant use of `await` on a return value."
                }
            },
            "no-script-url": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `javascript:` urls",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-script-url"
                },
                "schema": [],
                "messages": {
                    "unexpectedScriptURL": "Script URL is a form of eval."
                }
            },
            "no-self-assign": {
                "type": "problem",
                "docs": {
                    "description": "disallow assignments where both sides are exactly the same",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-self-assign"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "props": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "selfAssignment": "'{{name}}' is assigned to itself."
                }
            },
            "no-self-compare": {
                "type": "problem",
                "docs": {
                    "description": "disallow comparisons where both sides are exactly the same",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-self-compare"
                },
                "schema": [],
                "messages": {
                    "comparingToSelf": "Comparing to itself is potentially pointless."
                }
            },
            "no-sequences": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow comma operators",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-sequences"
                },
                "schema": [],
                "messages": {
                    "unexpectedCommaExpression": "Unexpected use of comma operator."
                }
            },
            "no-setter-return": {
                "type": "problem",
                "docs": {
                    "description": "disallow returning values from setters",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-setter-return"
                },
                "schema": [],
                "messages": {
                    "returnsValue": "Setter cannot return a value."
                }
            },
            "no-shadow": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow variable declarations from shadowing variables declared in the outer scope",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-shadow"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "builtinGlobals": {
                                "type": "boolean",
                                "default": false
                            },
                            "hoist": {
                                "enum": [
                                    "all",
                                    "functions",
                                    "never"
                                ],
                                "default": "functions"
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noShadow": "'{{name}}' is already declared in the upper scope."
                }
            },
            "no-shadow-restricted-names": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow identifiers from shadowing restricted names",
                    "category": "Variables",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-shadow-restricted-names"
                },
                "schema": [],
                "messages": {
                    "shadowingRestrictedName": "Shadowing of global property '{{name}}'."
                }
            },
            "no-spaced-func": {
                "type": "layout",
                "docs": {
                    "description": "disallow spacing between function identifiers and their applications (deprecated)",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-spaced-func"
                },
                "deprecated": true,
                "replacedBy": [
                    "func-call-spacing"
                ],
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "noSpacedFunction": "Unexpected space between function name and paren."
                }
            },
            "no-sparse-arrays": {
                "type": "problem",
                "docs": {
                    "description": "disallow sparse arrays",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-sparse-arrays"
                },
                "schema": [],
                "messages": {
                    "unexpectedSparseArray": "Unexpected comma in middle of array."
                }
            },
            "no-sync": {
                "deprecated": true,
                "replacedBy": [],
                "type": "suggestion",
                "docs": {
                    "description": "disallow synchronous methods",
                    "category": "Node.js and CommonJS",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-sync"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAtRootLevel": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noSync": "Unexpected sync method: '{{propertyName}}'."
                }
            },
            "no-tabs": {
                "type": "layout",
                "docs": {
                    "description": "disallow all tabs",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-tabs"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowIndentationTabs": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedTab": "Unexpected tab character."
                }
            },
            "no-template-curly-in-string": {
                "type": "problem",
                "docs": {
                    "description": "disallow template literal placeholder syntax in regular strings",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-template-curly-in-string"
                },
                "schema": [],
                "messages": {
                    "unexpectedTemplateExpression": "Unexpected template string expression."
                }
            },
            "no-ternary": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow ternary operators",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-ternary"
                },
                "schema": [],
                "messages": {
                    "noTernaryOperator": "Ternary operator used."
                }
            },
            "no-this-before-super": {
                "type": "problem",
                "docs": {
                    "description": "disallow `this`/`super` before calling `super()` in constructors",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-this-before-super"
                },
                "schema": [],
                "messages": {
                    "noBeforeSuper": "'{{kind}}' is not allowed before 'super()'."
                }
            },
            "no-throw-literal": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow throwing literals as exceptions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-throw-literal"
                },
                "schema": [],
                "messages": {
                    "object": "Expected an error object to be thrown.",
                    "undef": "Do not throw undefined."
                }
            },
            "no-trailing-spaces": {
                "type": "layout",
                "docs": {
                    "description": "disallow trailing whitespace at the end of lines",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-trailing-spaces"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "skipBlankLines": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreComments": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "trailingSpace": "Trailing spaces not allowed."
                }
            },
            "no-undef": {
                "type": "problem",
                "docs": {
                    "description": "disallow the use of undeclared variables unless mentioned in `/*global */` comments",
                    "category": "Variables",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-undef"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "typeof": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "undef": "'{{name}}' is not defined."
                }
            },
            "no-undef-init": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow initializing variables to `undefined`",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-undef-init"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unnecessaryUndefinedInit": "It's not necessary to initialize '{{name}}' to undefined."
                }
            },
            "no-undefined": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `undefined` as an identifier",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-undefined"
                },
                "schema": [],
                "messages": {
                    "unexpectedUndefined": "Unexpected use of undefined."
                }
            },
            "no-underscore-dangle": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow dangling underscores in identifiers",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-underscore-dangle"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "allowAfterThis": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowAfterSuper": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowAfterThisConstructor": {
                                "type": "boolean",
                                "default": false
                            },
                            "enforceInMethodNames": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowFunctionParams": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedUnderscore": "Unexpected dangling '_' in '{{identifier}}'."
                }
            },
            "no-unexpected-multiline": {
                "type": "problem",
                "docs": {
                    "description": "disallow confusing multiline expressions",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-unexpected-multiline"
                },
                "schema": [],
                "messages": {
                    "function": "Unexpected newline between function and ( of function call.",
                    "property": "Unexpected newline between object and [ of property access.",
                    "taggedTemplate": "Unexpected newline between template tag and template literal.",
                    "division": "Unexpected newline between numerator and division operator."
                }
            },
            "no-unmodified-loop-condition": {
                "type": "problem",
                "docs": {
                    "description": "disallow unmodified loop conditions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-unmodified-loop-condition"
                },
                "schema": [],
                "messages": {
                    "loopConditionNotModified": "'{{name}}' is not modified in this loop."
                }
            },
            "no-unneeded-ternary": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow ternary operators when simpler alternatives exist",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-unneeded-ternary"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "defaultAssignment": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "unnecessaryConditionalExpression": "Unnecessary use of boolean literals in conditional expression.",
                    "unnecessaryConditionalAssignment": "Unnecessary use of conditional expression for default assignment."
                }
            },
            "no-unreachable": {
                "type": "problem",
                "docs": {
                    "description": "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-unreachable"
                },
                "schema": [],
                "messages": {
                    "unreachableCode": "Unreachable code."
                }
            },
            "no-unreachable-loop": {
                "type": "problem",
                "docs": {
                    "description": "disallow loops with a body that allows only one iteration",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-unreachable-loop"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignore": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "WhileStatement",
                                        "DoWhileStatement",
                                        "ForStatement",
                                        "ForInStatement",
                                        "ForOfStatement"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "invalid": "Invalid loop. Its body allows only one iteration."
                }
            },
            "no-unsafe-finally": {
                "type": "problem",
                "docs": {
                    "description": "disallow control flow statements in `finally` blocks",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-unsafe-finally"
                },
                "schema": [],
                "messages": {
                    "unsafeUsage": "Unsafe usage of {{nodeType}}."
                }
            },
            "no-unsafe-negation": {
                "type": "problem",
                "docs": {
                    "description": "disallow negating the left operand of relational operators",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-unsafe-negation",
                    "suggestion": true
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForOrderingRelations": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": null,
                "messages": {
                    "unexpected": "Unexpected negating the left operand of '{{operator}}' operator.",
                    "suggestNegatedExpression": "Negate '{{operator}}' expression instead of its left operand. This changes the current behavior.",
                    "suggestParenthesisedNegation": "Wrap negation in '()' to make the intention explicit. This preserves the current behavior."
                }
            },
            "no-unused-expressions": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unused expressions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-unused-expressions"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowShortCircuit": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowTernary": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowTaggedTemplates": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unusedExpression": "Expected an assignment or function call and instead saw an expression."
                }
            },
            "no-unused-labels": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unused labels",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-unused-labels"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unused": "'{{name}}:' is defined but never used."
                }
            },
            "no-unused-vars": {
                "type": "problem",
                "docs": {
                    "description": "disallow unused variables",
                    "category": "Variables",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-unused-vars"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "all",
                                    "local"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "vars": {
                                        "enum": [
                                            "all",
                                            "local"
                                        ]
                                    },
                                    "varsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "args": {
                                        "enum": [
                                            "all",
                                            "after-used",
                                            "none"
                                        ]
                                    },
                                    "ignoreRestSiblings": {
                                        "type": "boolean"
                                    },
                                    "argsIgnorePattern": {
                                        "type": "string"
                                    },
                                    "caughtErrors": {
                                        "enum": [
                                            "all",
                                            "none"
                                        ]
                                    },
                                    "caughtErrorsIgnorePattern": {
                                        "type": "string"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
                }
            },
            "no-use-before-define": {
                "type": "problem",
                "docs": {
                    "description": "disallow the use of variables before they are defined",
                    "category": "Variables",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-use-before-define"
                },
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "nofunc"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "functions": {
                                        "type": "boolean"
                                    },
                                    "classes": {
                                        "type": "boolean"
                                    },
                                    "variables": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "usedBeforeDefined": "'{{name}}' was used before it was defined."
                }
            },
            "no-useless-backreference": {
                "type": "problem",
                "docs": {
                    "description": "disallow useless backreferences in regular expressions",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-backreference"
                },
                "schema": [],
                "messages": {
                    "nested": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' from within that group.",
                    "forward": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears later in the pattern.",
                    "backward": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which appears before in the same lookbehind.",
                    "disjunctive": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in another alternative.",
                    "intoNegativeLookaround": "Backreference '{{ bref }}' will be ignored. It references group '{{ group }}' which is in a negative lookaround."
                }
            },
            "no-useless-call": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary calls to `.call()` and `.apply()`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-call"
                },
                "schema": [],
                "messages": {
                    "unnecessaryCall": "Unnecessary '.{{name}}()'."
                }
            },
            "no-useless-catch": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary `catch` clauses",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-useless-catch"
                },
                "schema": [],
                "messages": {
                    "unnecessaryCatchClause": "Unnecessary catch clause.",
                    "unnecessaryCatch": "Unnecessary try/catch wrapper."
                }
            },
            "no-useless-computed-key": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary computed property keys in objects and classes",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-computed-key"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForClassMembers": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "unnecessarilyComputedProperty": "Unnecessarily computed property [{{property}}] found."
                }
            },
            "no-useless-concat": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary concatenation of literals or template literals",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-concat"
                },
                "schema": [],
                "messages": {
                    "unexpectedConcat": "Unexpected string concatenation of literals."
                }
            },
            "no-useless-constructor": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary constructors",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-constructor"
                },
                "schema": [],
                "messages": {
                    "noUselessConstructor": "Useless constructor."
                }
            },
            "no-useless-escape": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow unnecessary escape characters",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-useless-escape",
                    "suggestion": true
                },
                "messages": {
                    "unnecessaryEscape": "Unnecessary escape character: \\{{character}}.",
                    "removeEscape": "Remove the `\\`. This maintains the current functionality.",
                    "escapeBackslash": "Replace the `\\` with `\\\\` to include the actual backslash character."
                },
                "schema": []
            },
            "no-useless-rename": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow renaming import, export, and destructured assignments to the same name",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-rename"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreDestructuring": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreImport": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreExport": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unnecessarilyRenamed": "{{type}} {{name}} unnecessarily renamed."
                }
            },
            "no-useless-return": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow redundant return statements",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-useless-return"
                },
                "fixable": "code",
                "schema": [],
                "messages": {
                    "unnecessaryReturn": "Unnecessary return statement."
                }
            },
            "no-var": {
                "type": "suggestion",
                "docs": {
                    "description": "require `let` or `const` instead of `var`",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-var"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpectedVar": "Unexpected var, use let or const instead."
                }
            },
            "no-void": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `void` operators",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-void"
                },
                "messages": {
                    "noVoid": "Expected 'undefined' and instead saw 'void'."
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAsStatement": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "no-warning-comments": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified warning terms in comments",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-warning-comments"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "terms": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "location": {
                                "enum": [
                                    "start",
                                    "anywhere"
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedComment": "Unexpected '{{matchedTerm}}' comment: '{{comment}}'."
                }
            },
            "no-whitespace-before-property": {
                "type": "layout",
                "docs": {
                    "description": "disallow whitespace before properties",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/no-whitespace-before-property"
                },
                "fixable": "whitespace",
                "schema": [],
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace before property {{propName}}."
                }
            },
            "no-with": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `with` statements",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/no-with"
                },
                "schema": [],
                "messages": {
                    "unexpectedWith": "Unexpected use of 'with' statement."
                }
            },
            "nonblock-statement-body-position": {
                "type": "layout",
                "docs": {
                    "description": "enforce the location of single-line statements",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/nonblock-statement-body-position"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "beside",
                            "below",
                            "any"
                        ]
                    },
                    {
                        "properties": {
                            "overrides": {
                                "properties": {
                                    "if": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "else": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "while": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "do": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    },
                                    "for": {
                                        "enum": [
                                            "beside",
                                            "below",
                                            "any"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "expectNoLinebreak": "Expected no linebreak before this statement.",
                    "expectLinebreak": "Expected a linebreak before this statement."
                }
            },
            "object-curly-newline": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent line breaks inside braces",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/object-curly-newline"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "oneOf": [
                                    {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "multiline": {
                                                "type": "boolean"
                                            },
                                            "minProperties": {
                                                "type": "integer",
                                                "minimum": 0
                                            },
                                            "consistent": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "minProperties": 1
                                    }
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "ObjectExpression": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ObjectPattern": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ImportDeclaration": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    },
                                    "ExportDeclaration": {
                                        "oneOf": [
                                            {
                                                "enum": [
                                                    "always",
                                                    "never"
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "multiline": {
                                                        "type": "boolean"
                                                    },
                                                    "minProperties": {
                                                        "type": "integer",
                                                        "minimum": 0
                                                    },
                                                    "consistent": {
                                                        "type": "boolean"
                                                    }
                                                },
                                                "additionalProperties": false,
                                                "minProperties": 1
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
                    "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
                    "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
                    "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
                }
            },
            "object-curly-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing inside braces",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/object-curly-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "arraysInObjects": {
                                "type": "boolean"
                            },
                            "objectsInObjects": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "requireSpaceBefore": "A space is required before '{{token}}'.",
                    "requireSpaceAfter": "A space is required after '{{token}}'.",
                    "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
                    "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
                }
            },
            "object-property-newline": {
                "type": "layout",
                "docs": {
                    "description": "enforce placing object properties on separate lines",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/object-property-newline"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAllPropertiesOnSameLine": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowMultiplePropertiesPerLine": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
                    "propertiesOnNewline": "Object properties must go on a new line."
                }
            },
            "object-shorthand": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow method and property shorthand syntax for object literals",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/object-shorthand"
                },
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "methods",
                                        "properties",
                                        "never",
                                        "consistent",
                                        "consistent-as-needed"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "methods",
                                        "properties"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "avoidQuotes": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "methods"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "ignoreConstructors": {
                                            "type": "boolean"
                                        },
                                        "avoidQuotes": {
                                            "type": "boolean"
                                        },
                                        "avoidExplicitReturnArrows": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "expectedAllPropertiesShorthanded": "Expected shorthand for all properties.",
                    "expectedLiteralMethodLongform": "Expected longform method syntax for string literal keys.",
                    "expectedPropertyShorthand": "Expected property shorthand.",
                    "expectedPropertyLongform": "Expected longform property syntax.",
                    "expectedMethodShorthand": "Expected method shorthand.",
                    "expectedMethodLongform": "Expected longform method syntax.",
                    "unexpectedMix": "Unexpected mix of shorthand and non-shorthand properties."
                }
            },
            "one-var": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce variables to be declared either together or separately in functions",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/one-var"
                },
                "fixable": "code",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never",
                                    "consecutive"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "separateRequires": {
                                        "type": "boolean"
                                    },
                                    "var": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    },
                                    "let": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    },
                                    "const": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "initialized": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    },
                                    "uninitialized": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "consecutive"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "combineUninitialized": "Combine this with the previous '{{type}}' statement with uninitialized variables.",
                    "combineInitialized": "Combine this with the previous '{{type}}' statement with initialized variables.",
                    "splitUninitialized": "Split uninitialized '{{type}}' declarations into multiple statements.",
                    "splitInitialized": "Split initialized '{{type}}' declarations into multiple statements.",
                    "splitRequires": "Split requires to be separated into a single block.",
                    "combine": "Combine this with the previous '{{type}}' statement.",
                    "split": "Split '{{type}}' declarations into multiple statements."
                }
            },
            "one-var-declaration-per-line": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow newlines around variable declarations",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/one-var-declaration-per-line"
                },
                "schema": [
                    {
                        "enum": [
                            "always",
                            "initializations"
                        ]
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectVarOnNewline": "Expected variable declaration to be on a new line."
                }
            },
            "operator-assignment": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow assignment operator shorthand where possible",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/operator-assignment"
                },
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "fixable": "code",
                "messages": {
                    "replaced": "Assignment can be replaced with operator assignment.",
                    "unexpected": "Unexpected operator assignment shorthand."
                }
            },
            "operator-linebreak": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent linebreak style for operators",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/operator-linebreak"
                },
                "schema": [
                    {
                        "enum": [
                            "after",
                            "before",
                            "none",
                            null
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "overrides": {
                                "type": "object",
                                "additionalProperties": {
                                    "enum": [
                                        "after",
                                        "before",
                                        "none",
                                        "ignore"
                                    ]
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
                    "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
                    "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
                    "noLinebreak": "There should be no line break before or after '{{operator}}'."
                }
            },
            "padded-blocks": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow padding within blocks",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/padded-blocks"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "blocks": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    },
                                    "switches": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    },
                                    "classes": {
                                        "enum": [
                                            "always",
                                            "never"
                                        ]
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowSingleLineBlocks": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "alwaysPadBlock": "Block must be padded by blank lines.",
                    "neverPadBlock": "Block must not be padded by blank lines."
                }
            },
            "padding-line-between-statements": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow padding lines between statements",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/padding-line-between-statements"
                },
                "fixable": "whitespace",
                "schema": {
                    "definitions": {
                        "paddingType": {
                            "enum": [
                                "any",
                                "never",
                                "always"
                            ]
                        },
                        "statementType": {
                            "anyOf": [
                                {
                                    "enum": [
                                        "*",
                                        "block-like",
                                        "cjs-export",
                                        "cjs-import",
                                        "directive",
                                        "expression",
                                        "iife",
                                        "multiline-block-like",
                                        "multiline-expression",
                                        "multiline-const",
                                        "multiline-let",
                                        "multiline-var",
                                        "singleline-const",
                                        "singleline-let",
                                        "singleline-var",
                                        "block",
                                        "empty",
                                        "function",
                                        "break",
                                        "case",
                                        "class",
                                        "const",
                                        "continue",
                                        "debugger",
                                        "default",
                                        "do",
                                        "export",
                                        "for",
                                        "if",
                                        "import",
                                        "let",
                                        "return",
                                        "switch",
                                        "throw",
                                        "try",
                                        "var",
                                        "while",
                                        "with"
                                    ]
                                },
                                {
                                    "type": "array",
                                    "items": {
                                        "enum": [
                                            "*",
                                            "block-like",
                                            "cjs-export",
                                            "cjs-import",
                                            "directive",
                                            "expression",
                                            "iife",
                                            "multiline-block-like",
                                            "multiline-expression",
                                            "multiline-const",
                                            "multiline-let",
                                            "multiline-var",
                                            "singleline-const",
                                            "singleline-let",
                                            "singleline-var",
                                            "block",
                                            "empty",
                                            "function",
                                            "break",
                                            "case",
                                            "class",
                                            "const",
                                            "continue",
                                            "debugger",
                                            "default",
                                            "do",
                                            "export",
                                            "for",
                                            "if",
                                            "import",
                                            "let",
                                            "return",
                                            "switch",
                                            "throw",
                                            "try",
                                            "var",
                                            "while",
                                            "with"
                                        ]
                                    },
                                    "minItems": 1,
                                    "uniqueItems": true,
                                    "additionalItems": false
                                }
                            ]
                        }
                    },
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "blankLine": {
                                "$ref": "#/definitions/paddingType"
                            },
                            "prev": {
                                "$ref": "#/definitions/statementType"
                            },
                            "next": {
                                "$ref": "#/definitions/statementType"
                            }
                        },
                        "additionalProperties": false,
                        "required": [
                            "blankLine",
                            "prev",
                            "next"
                        ]
                    },
                    "additionalItems": false
                },
                "messages": {
                    "unexpectedBlankLine": "Unexpected blank line before this statement.",
                    "expectedBlankLine": "Expected blank line before this statement."
                }
            },
            "prefer-arrow-callback": {
                "type": "suggestion",
                "docs": {
                    "description": "require using arrow functions for callbacks",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-arrow-callback"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowNamedFunctions": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowUnboundThis": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "preferArrowCallback": "Unexpected function expression."
                }
            },
            "prefer-const": {
                "type": "suggestion",
                "docs": {
                    "description": "require `const` declarations for variables that are never reassigned after declared",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-const"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "destructuring": {
                                "enum": [
                                    "any",
                                    "all"
                                ],
                                "default": "any"
                            },
                            "ignoreReadBeforeAssign": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "useConst": "'{{name}}' is never reassigned. Use 'const' instead."
                }
            },
            "prefer-destructuring": {
                "type": "suggestion",
                "docs": {
                    "description": "require destructuring from arrays and/or objects",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-destructuring"
                },
                "fixable": "code",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "object",
                                "properties": {
                                    "VariableDeclarator": {
                                        "type": "object",
                                        "properties": {
                                            "array": {
                                                "type": "boolean"
                                            },
                                            "object": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    "AssignmentExpression": {
                                        "type": "object",
                                        "properties": {
                                            "array": {
                                                "type": "boolean"
                                            },
                                            "object": {
                                                "type": "boolean"
                                            }
                                        },
                                        "additionalProperties": false
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "array": {
                                        "type": "boolean"
                                    },
                                    "object": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "enforceForRenamedProperties": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "preferDestructuring": "Use {{type}} destructuring."
                }
            },
            "prefer-exponentiation-operator": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `Math.pow` in favor of the `**` operator",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-exponentiation-operator"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "useExponentiation": "Use the '**' operator instead of 'Math.pow'."
                }
            },
            "prefer-named-capture-group": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce using named capture group in regular expression",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-named-capture-group"
                },
                "schema": [],
                "messages": {
                    "required": "Capture group '{{group}}' should be converted to a named or non-capturing group."
                }
            },
            "prefer-numeric-literals": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-numeric-literals"
                },
                "schema": [],
                "messages": {
                    "useLiteral": "Use {{system}} literals instead of {{functionName}}()."
                },
                "fixable": "code"
            },
            "prefer-object-spread": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead.",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-object-spread"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "useSpreadMessage": "Use an object spread instead of `Object.assign` eg: `{ ...foo }`.",
                    "useLiteralMessage": "Use an object literal instead of `Object.assign`. eg: `{ foo: bar }`."
                }
            },
            "prefer-promise-reject-errors": {
                "type": "suggestion",
                "docs": {
                    "description": "require using Error objects as Promise rejection reasons",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-promise-reject-errors"
                },
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowEmptyReject": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "rejectAnError": "Expected the Promise rejection reason to be an Error."
                }
            },
            "prefer-reflect": {
                "type": "suggestion",
                "docs": {
                    "description": "require `Reflect` methods where applicable",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-reflect"
                },
                "deprecated": true,
                "replacedBy": [],
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "apply",
                                        "call",
                                        "delete",
                                        "defineProperty",
                                        "getOwnPropertyDescriptor",
                                        "getPrototypeOf",
                                        "setPrototypeOf",
                                        "isExtensible",
                                        "getOwnPropertyNames",
                                        "preventExtensions"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "preferReflect": "Avoid using {{existing}}, instead use {{substitute}}."
                }
            },
            "prefer-regex-literals": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow use of the `RegExp` constructor in favor of regular expression literals",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-regex-literals"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "disallowRedundantWrapping": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedRegExp": "Use a regular expression literal instead of the 'RegExp' constructor.",
                    "unexpectedRedundantRegExp": "Regular expression literal is unnecessarily wrapped within a 'RegExp' constructor.",
                    "unexpectedRedundantRegExpWithFlags": "Use regular expression literal with flags instead of the 'RegExp' constructor."
                }
            },
            "prefer-rest-params": {
                "type": "suggestion",
                "docs": {
                    "description": "require rest parameters instead of `arguments`",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-rest-params"
                },
                "schema": [],
                "messages": {
                    "preferRestParams": "Use the rest parameters instead of 'arguments'."
                }
            },
            "prefer-spread": {
                "type": "suggestion",
                "docs": {
                    "description": "require spread operators instead of `.apply()`",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-spread"
                },
                "schema": [],
                "fixable": null,
                "messages": {
                    "preferSpread": "Use the spread operator instead of '.apply()'."
                }
            },
            "prefer-template": {
                "type": "suggestion",
                "docs": {
                    "description": "require template literals instead of string concatenation",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/prefer-template"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "unexpectedStringConcatenation": "Unexpected string concatenation."
                }
            },
            "quote-props": {
                "type": "suggestion",
                "docs": {
                    "description": "require quotes around object literal property names",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/quote-props"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "as-needed",
                                        "consistent",
                                        "consistent-as-needed"
                                    ]
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 1
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "as-needed",
                                        "consistent",
                                        "consistent-as-needed"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "keywords": {
                                            "type": "boolean"
                                        },
                                        "unnecessary": {
                                            "type": "boolean"
                                        },
                                        "numbers": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "fixable": "code",
                "messages": {
                    "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
                    "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
                    "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
                    "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
                    "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
                    "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
                    "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
                }
            },
            "quotes": {
                "type": "layout",
                "docs": {
                    "description": "enforce the consistent use of either backticks, double, or single quotes",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/quotes"
                },
                "fixable": "code",
                "schema": [
                    {
                        "enum": [
                            "single",
                            "double",
                            "backtick"
                        ]
                    },
                    {
                        "anyOf": [
                            {
                                "enum": [
                                    "avoid-escape"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "avoidEscape": {
                                        "type": "boolean"
                                    },
                                    "allowTemplateLiterals": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "wrongQuotes": "Strings must use {{description}}."
                }
            },
            "radix": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce the consistent use of the radix argument when using `parseInt()`",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/radix"
                },
                "schema": [
                    {
                        "enum": [
                            "always",
                            "as-needed"
                        ]
                    }
                ],
                "messages": {
                    "missingParameters": "Missing parameters.",
                    "redundantRadix": "Redundant radix parameter.",
                    "missingRadix": "Missing radix parameter.",
                    "invalidRadix": "Invalid radix parameter, must be an integer between 2 and 36."
                }
            },
            "require-atomic-updates": {
                "type": "problem",
                "docs": {
                    "description": "disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/require-atomic-updates"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "nonAtomicUpdate": "Possible race condition: `{{value}}` might be reassigned based on an outdated value of `{{value}}`."
                }
            },
            "require-await": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow async functions which have no `await` expression",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/require-await"
                },
                "schema": [],
                "messages": {
                    "missingAwait": "{{name}} has no 'await' expression."
                }
            },
            "require-jsdoc": {
                "type": "suggestion",
                "docs": {
                    "description": "require JSDoc comments",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/require-jsdoc"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "require": {
                                "type": "object",
                                "properties": {
                                    "ClassDeclaration": {
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "MethodDefinition": {
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "FunctionDeclaration": {
                                        "type": "boolean",
                                        "default": true
                                    },
                                    "ArrowFunctionExpression": {
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "FunctionExpression": {
                                        "type": "boolean",
                                        "default": false
                                    }
                                },
                                "additionalProperties": false,
                                "default": {}
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "deprecated": true,
                "replacedBy": [],
                "messages": {
                    "missingJSDocComment": "Missing JSDoc comment."
                }
            },
            "require-unicode-regexp": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce the use of `u` flag on RegExp",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/require-unicode-regexp"
                },
                "messages": {
                    "requireUFlag": "Use the 'u' flag."
                },
                "schema": []
            },
            "require-yield": {
                "type": "suggestion",
                "docs": {
                    "description": "require generator functions to contain `yield`",
                    "category": "ECMAScript 6",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/require-yield"
                },
                "schema": [],
                "messages": {
                    "missingYield": "This generator function does not have 'yield'."
                }
            },
            "rest-spread-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce spacing between rest and spread operators and their expressions",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/rest-spread-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "unexpectedWhitespace": "Unexpected whitespace after {{type}} operator.",
                    "expectedWhitespace": "Expected whitespace after {{type}} operator."
                }
            },
            "semi": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow semicolons instead of ASI",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/semi"
                },
                "fixable": "code",
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "beforeStatementContinuationChars": {
                                            "enum": [
                                                "always",
                                                "any",
                                                "never"
                                            ]
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "omitLastInOneLineBlock": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "minItems": 0,
                            "maxItems": 2
                        }
                    ]
                },
                "messages": {
                    "missingSemi": "Missing semicolon.",
                    "extraSemi": "Extra semicolon."
                }
            },
            "semi-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before and after semicolons",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/semi-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedWhitespaceBefore": "Unexpected whitespace before semicolon.",
                    "unexpectedWhitespaceAfter": "Unexpected whitespace after semicolon.",
                    "missingWhitespaceBefore": "Missing whitespace before semicolon.",
                    "missingWhitespaceAfter": "Missing whitespace after semicolon."
                }
            },
            "semi-style": {
                "type": "layout",
                "docs": {
                    "description": "enforce location of semicolons",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/semi-style"
                },
                "schema": [
                    {
                        "enum": [
                            "last",
                            "first"
                        ]
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectedSemiColon": "Expected this semicolon to be at {{pos}}."
                }
            },
            "sort-imports": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce sorted import declarations within modules",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/sort-imports"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreCase": {
                                "type": "boolean",
                                "default": false
                            },
                            "memberSyntaxSortOrder": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "none",
                                        "all",
                                        "multiple",
                                        "single"
                                    ]
                                },
                                "uniqueItems": true,
                                "minItems": 4,
                                "maxItems": 4
                            },
                            "ignoreDeclarationSort": {
                                "type": "boolean",
                                "default": false
                            },
                            "ignoreMemberSort": {
                                "type": "boolean",
                                "default": false
                            },
                            "allowSeparatedGroups": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "sortImportsAlphabetically": "Imports should be sorted alphabetically.",
                    "sortMembersAlphabetically": "Member '{{memberName}}' of the import declaration should be sorted alphabetically.",
                    "unexpectedSyntaxOrder": "Expected '{{syntaxA}}' syntax before '{{syntaxB}}' syntax."
                }
            },
            "sort-keys": {
                "type": "suggestion",
                "docs": {
                    "description": "require object keys to be sorted",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/sort-keys"
                },
                "schema": [
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "caseSensitive": {
                                "type": "boolean",
                                "default": true
                            },
                            "natural": {
                                "type": "boolean",
                                "default": false
                            },
                            "minKeys": {
                                "type": "integer",
                                "minimum": 2,
                                "default": 2
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'."
                }
            },
            "sort-vars": {
                "type": "suggestion",
                "docs": {
                    "description": "require variables within the same declaration block to be sorted",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/sort-vars"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "ignoreCase": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "sortVars": "Variables within the same declaration block should be sorted alphabetically."
                }
            },
            "space-before-blocks": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before blocks",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/space-before-blocks"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "keywords": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ]
                                    },
                                    "functions": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ]
                                    },
                                    "classes": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "off"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before opening brace.",
                    "missingSpace": "Missing space before opening brace."
                }
            },
            "space-before-function-paren": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before `function` definition opening parenthesis",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/space-before-function-paren"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "always",
                                    "never"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "anonymous": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    },
                                    "named": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    },
                                    "asyncArrow": {
                                        "enum": [
                                            "always",
                                            "never",
                                            "ignore"
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "unexpectedSpace": "Unexpected space before function parentheses.",
                    "missingSpace": "Missing space before function parentheses."
                }
            },
            "space-in-parens": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing inside parentheses",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/space-in-parens"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "{}",
                                        "[]",
                                        "()",
                                        "empty"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingOpeningSpace": "There must be a space after this paren.",
                    "missingClosingSpace": "There must be a space before this paren.",
                    "rejectedOpeningSpace": "There should be no space after this paren.",
                    "rejectedClosingSpace": "There should be no space before this paren."
                }
            },
            "space-infix-ops": {
                "type": "layout",
                "docs": {
                    "description": "require spacing around infix operators",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/space-infix-ops"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "int32Hint": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "missingSpace": "Operator '{{operator}}' must be spaced."
                }
            },
            "space-unary-ops": {
                "type": "layout",
                "docs": {
                    "description": "enforce consistent spacing before or after unary operators",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/space-unary-ops"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "words": {
                                "type": "boolean",
                                "default": true
                            },
                            "nonwords": {
                                "type": "boolean",
                                "default": false
                            },
                            "overrides": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
                    "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
                    "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
                    "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
                    "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
                    "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
                }
            },
            "spaced-comment": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce consistent spacing after the `//` or `/*` in a comment",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/spaced-comment"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptions": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "markers": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "line": {
                                "type": "object",
                                "properties": {
                                    "exceptions": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "markers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "additionalProperties": false
                            },
                            "block": {
                                "type": "object",
                                "properties": {
                                    "exceptions": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "markers": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "balanced": {
                                        "type": "boolean",
                                        "default": false
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unexpectedSpaceAfterMarker": "Unexpected space or tab after marker ({{refChar}}) in comment.",
                    "expectedExceptionAfter": "Expected exception block, space or tab after '{{refChar}}' in comment.",
                    "unexpectedSpaceBefore": "Unexpected space or tab before '*/' in comment.",
                    "unexpectedSpaceAfter": "Unexpected space or tab after '{{refChar}}' in comment.",
                    "expectedSpaceBefore": "Expected space or tab before '*/' in comment.",
                    "expectedSpaceAfter": "Expected space or tab after '{{refChar}}' in comment."
                }
            },
            "strict": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow strict mode directives",
                    "category": "Strict Mode",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/strict"
                },
                "schema": [
                    {
                        "enum": [
                            "never",
                            "global",
                            "function",
                            "safe"
                        ]
                    }
                ],
                "fixable": "code",
                "messages": {
                    "function": "Use the function form of 'use strict'.",
                    "global": "Use the global form of 'use strict'.",
                    "multiple": "Multiple 'use strict' directives.",
                    "never": "Strict mode is not permitted.",
                    "unnecessary": "Unnecessary 'use strict' directive.",
                    "module": "'use strict' is unnecessary inside of modules.",
                    "implied": "'use strict' is unnecessary when implied strict mode is enabled.",
                    "unnecessaryInClasses": "'use strict' is unnecessary inside of classes.",
                    "nonSimpleParameterList": "'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.",
                    "wrap": "Wrap {{name}} in a function with 'use strict' directive."
                }
            },
            "switch-colon-spacing": {
                "type": "layout",
                "docs": {
                    "description": "enforce spacing around colons of switch statements",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/switch-colon-spacing"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "before": {
                                "type": "boolean",
                                "default": false
                            },
                            "after": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "whitespace",
                "messages": {
                    "expectedBefore": "Expected space(s) before this colon.",
                    "expectedAfter": "Expected space(s) after this colon.",
                    "unexpectedBefore": "Unexpected space(s) before this colon.",
                    "unexpectedAfter": "Unexpected space(s) after this colon."
                }
            },
            "symbol-description": {
                "type": "suggestion",
                "docs": {
                    "description": "require symbol descriptions",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/symbol-description"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "expected": "Expected Symbol to have a description."
                }
            },
            "template-curly-spacing": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow spacing around embedded expressions of template strings",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/template-curly-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "expectedBefore": "Expected space(s) before '}'.",
                    "expectedAfter": "Expected space(s) after '${'.",
                    "unexpectedBefore": "Unexpected space(s) before '}'.",
                    "unexpectedAfter": "Unexpected space(s) after '${'."
                }
            },
            "template-tag-spacing": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow spacing between template tags and their literals",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/template-tag-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "unexpected": "Unexpected space between template tag and template literal.",
                    "missing": "Missing space between template tag and template literal."
                }
            },
            "unicode-bom": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow Unicode byte order mark (BOM)",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/unicode-bom"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "expected": "Expected Unicode BOM (Byte Order Mark).",
                    "unexpected": "Unexpected Unicode BOM (Byte Order Mark)."
                }
            },
            "use-isnan": {
                "type": "problem",
                "docs": {
                    "description": "require calls to `isNaN()` when checking for `NaN`",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/use-isnan"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "enforceForSwitchCase": {
                                "type": "boolean",
                                "default": true
                            },
                            "enforceForIndexOf": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "comparisonWithNaN": "Use the isNaN function to compare with NaN.",
                    "switchNaN": "'switch(NaN)' can never match a case clause. Use Number.isNaN instead of the switch.",
                    "caseNaN": "'case NaN' can never match. Use Number.isNaN before the switch.",
                    "indexOfNaN": "Array prototype method '{{ methodName }}' cannot find NaN."
                }
            },
            "valid-jsdoc": {
                "type": "suggestion",
                "docs": {
                    "description": "enforce valid JSDoc comments",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/valid-jsdoc"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "prefer": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "preferType": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            },
                            "requireReturn": {
                                "type": "boolean",
                                "default": true
                            },
                            "requireParamDescription": {
                                "type": "boolean",
                                "default": true
                            },
                            "requireReturnDescription": {
                                "type": "boolean",
                                "default": true
                            },
                            "matchDescription": {
                                "type": "string"
                            },
                            "requireReturnType": {
                                "type": "boolean",
                                "default": true
                            },
                            "requireParamType": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "unexpectedTag": "Unexpected @{{title}} tag; function has no return statement.",
                    "expected": "Expected JSDoc for '{{name}}' but found '{{jsdocName}}'.",
                    "use": "Use @{{name}} instead.",
                    "useType": "Use '{{expectedTypeName}}' instead of '{{currentTypeName}}'.",
                    "syntaxError": "JSDoc syntax error.",
                    "missingBrace": "JSDoc type missing brace.",
                    "missingParamDesc": "Missing JSDoc parameter description for '{{name}}'.",
                    "missingParamType": "Missing JSDoc parameter type for '{{name}}'.",
                    "missingReturnType": "Missing JSDoc return type.",
                    "missingReturnDesc": "Missing JSDoc return description.",
                    "missingReturn": "Missing JSDoc @{{returns}} for function.",
                    "missingParam": "Missing JSDoc for parameter '{{name}}'.",
                    "duplicateParam": "Duplicate JSDoc parameter '{{name}}'.",
                    "unsatisfiedDesc": "JSDoc description does not satisfy the regex pattern."
                },
                "deprecated": true,
                "replacedBy": []
            },
            "valid-typeof": {
                "type": "problem",
                "docs": {
                    "description": "enforce comparing `typeof` expressions against valid strings",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://eslint.org/docs/rules/valid-typeof"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "requireStringLiterals": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "invalidValue": "Invalid typeof comparison value.",
                    "notString": "Typeof comparisons should be to string literals."
                }
            },
            "vars-on-top": {
                "type": "suggestion",
                "docs": {
                    "description": "require `var` declarations be placed at the top of their containing scope",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/vars-on-top"
                },
                "schema": [],
                "messages": {
                    "top": "All 'var' declarations must be at the top of the function scope."
                }
            },
            "wrap-iife": {
                "type": "layout",
                "docs": {
                    "description": "require parentheses around immediate `function` invocations",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/wrap-iife"
                },
                "schema": [
                    {
                        "enum": [
                            "outside",
                            "inside",
                            "any"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "functionPrototypeMethods": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "wrapInvocation": "Wrap an immediate function invocation in parentheses.",
                    "wrapExpression": "Wrap only the function expression in parens.",
                    "moveInvocation": "Move the invocation into the parens that contain the function."
                }
            },
            "wrap-regex": {
                "type": "layout",
                "docs": {
                    "description": "require parenthesis around regex literals",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/wrap-regex"
                },
                "schema": [],
                "fixable": "code",
                "messages": {
                    "requireParens": "Wrap the regexp literal in parens to disambiguate the slash."
                }
            },
            "yield-star-spacing": {
                "type": "layout",
                "docs": {
                    "description": "require or disallow spacing around the `*` in `yield*` expressions",
                    "category": "ECMAScript 6",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/yield-star-spacing"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "oneOf": [
                            {
                                "enum": [
                                    "before",
                                    "after",
                                    "both",
                                    "neither"
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "before": {
                                        "type": "boolean"
                                    },
                                    "after": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "missingBefore": "Missing space before *.",
                    "missingAfter": "Missing space after *.",
                    "unexpectedBefore": "Unexpected space before *.",
                    "unexpectedAfter": "Unexpected space after *."
                }
            },
            "yoda": {
                "type": "suggestion",
                "docs": {
                    "description": "require or disallow \"Yoda\" conditions",
                    "category": "Best Practices",
                    "recommended": false,
                    "url": "https://eslint.org/docs/rules/yoda"
                },
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "exceptRange": {
                                "type": "boolean",
                                "default": false
                            },
                            "onlyEquality": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "fixable": "code",
                "messages": {
                    "expected": "Expected literal to be on the {{expectedSide}} side of {{operator}}."
                }
            },
            "import/no-unresolved": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-unresolved.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "caseSensitive": {
                                "type": "boolean",
                                "default": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/named": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/named.md"
                },
                "schema": []
            },
            "import/default": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/default.md"
                },
                "schema": []
            },
            "import/namespace": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/namespace.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowComputed": {
                                "description": "If `false`, will report computed (and thus, un-lintable) references to namespace members.",
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-namespace": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-namespace.md"
                },
                "fixable": "code",
                "schema": []
            },
            "import/export": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/export.md"
                },
                "schema": []
            },
            "import/no-mutable-exports": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-mutable-exports.md"
                },
                "schema": []
            },
            "import/extensions": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/extensions.md"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never"
                                    ]
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "pattern": {
                                            "type": "object",
                                            "patternProperties": {
                                                ".*": {
                                                    "enum": [
                                                        "always",
                                                        "ignorePackages",
                                                        "never"
                                                    ]
                                                }
                                            }
                                        },
                                        "ignorePackages": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "pattern": {
                                            "type": "object",
                                            "patternProperties": {
                                                ".*": {
                                                    "enum": [
                                                        "always",
                                                        "ignorePackages",
                                                        "never"
                                                    ]
                                                }
                                            }
                                        },
                                        "ignorePackages": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*": {
                                            "enum": [
                                                "always",
                                                "ignorePackages",
                                                "never"
                                            ]
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "always",
                                        "ignorePackages",
                                        "never"
                                    ]
                                },
                                {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*": {
                                            "enum": [
                                                "always",
                                                "ignorePackages",
                                                "never"
                                            ]
                                        }
                                    }
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                }
            },
            "import/no-restricted-paths": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-restricted-paths.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "zones": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "target": {
                                            "type": "string"
                                        },
                                        "from": {
                                            "type": "string"
                                        },
                                        "except": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "uniqueItems": true
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            },
                            "basePath": {
                                "type": "string"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-internal-modules": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-internal-modules.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/group-exports": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/group-exports.md"
                }
            },
            "import/no-relative-parent-imports": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-relative-parent-imports.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-self-import": {
                "type": "problem",
                "docs": {
                    "description": "Forbid a module from importing itself",
                    "recommended": true,
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-self-import.md"
                },
                "schema": []
            },
            "import/no-cycle": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-cycle.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "maxDepth": {
                                "oneOf": [
                                    {
                                        "description": "maximum dependency depth to traverse",
                                        "type": "integer",
                                        "minimum": 1
                                    },
                                    {
                                        "enum": [
                                            "∞"
                                        ],
                                        "type": "string"
                                    }
                                ]
                            },
                            "ignoreExternal": {
                                "description": "ignore external modules",
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-named-default": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-named-default.md"
                },
                "schema": []
            },
            "import/no-named-as-default": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-named-as-default.md"
                },
                "schema": []
            },
            "import/no-named-as-default-member": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-named-as-default-member.md"
                },
                "schema": []
            },
            "import/no-anonymous-default-export": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-anonymous-default-export.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowArray": {
                                "description": "If `false`, will report default export of an array",
                                "type": "boolean"
                            },
                            "allowArrowFunction": {
                                "description": "If `false`, will report default export of an arrow function",
                                "type": "boolean"
                            },
                            "allowCallExpression": {
                                "description": "If `false`, will report default export of a function call",
                                "type": "boolean"
                            },
                            "allowAnonymousClass": {
                                "description": "If `false`, will report default export of an anonymous class",
                                "type": "boolean"
                            },
                            "allowAnonymousFunction": {
                                "description": "If `false`, will report default export of an anonymous function",
                                "type": "boolean"
                            },
                            "allowLiteral": {
                                "description": "If `false`, will report default export of a literal",
                                "type": "boolean"
                            },
                            "allowObject": {
                                "description": "If `false`, will report default export of an object expression",
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-unused-modules": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-unused-modules.md"
                },
                "schema": [
                    {
                        "properties": {
                            "src": {
                                "description": "files/paths to be analyzed (only for unused exports)",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "ignoreExports": {
                                "description": "files/paths for which unused exports will not be reported (e.g module entry points)",
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string",
                                    "minLength": 1
                                }
                            },
                            "missingExports": {
                                "description": "report modules without any exports",
                                "type": "boolean"
                            },
                            "unusedExports": {
                                "description": "report exports without any usage",
                                "type": "boolean"
                            }
                        },
                        "not": {
                            "properties": {
                                "unusedExports": {
                                    "enum": [
                                        false
                                    ]
                                },
                                "missingExports": {
                                    "enum": [
                                        false
                                    ]
                                }
                            }
                        },
                        "anyOf": [
                            {
                                "not": {
                                    "properties": {
                                        "unusedExports": {
                                            "enum": [
                                                true
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "missingExports"
                                ]
                            },
                            {
                                "not": {
                                    "properties": {
                                        "missingExports": {
                                            "enum": [
                                                true
                                            ]
                                        }
                                    }
                                },
                                "required": [
                                    "unusedExports"
                                ]
                            },
                            {
                                "properties": {
                                    "unusedExports": {
                                        "enum": [
                                            true
                                        ]
                                    }
                                },
                                "required": [
                                    "unusedExports"
                                ]
                            },
                            {
                                "properties": {
                                    "missingExports": {
                                        "enum": [
                                            true
                                        ]
                                    }
                                },
                                "required": [
                                    "missingExports"
                                ]
                            }
                        ]
                    }
                ]
            },
            "import/no-commonjs": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-commonjs.md"
                },
                "schema": {
                    "anyOf": [
                        {
                            "type": "array",
                            "items": [
                                {
                                    "enum": [
                                        "allow-primitive-modules"
                                    ]
                                }
                            ],
                            "additionalItems": false
                        },
                        {
                            "type": "array",
                            "items": [
                                {
                                    "type": "object",
                                    "properties": {
                                        "allowPrimitiveModules": {
                                            "type": "boolean"
                                        },
                                        "allowRequire": {
                                            "type": "boolean"
                                        },
                                        "allowConditionalRequire": {
                                            "type": "boolean"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            ],
                            "additionalItems": false
                        }
                    ]
                }
            },
            "import/no-amd": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-amd.md"
                },
                "schema": []
            },
            "import/no-duplicates": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-duplicates.md"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "considerQueryString": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/first": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/first.md"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "string",
                        "enum": [
                            "absolute-first",
                            "disable-absolute-first"
                        ]
                    }
                ]
            },
            "import/max-dependencies": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/max-dependencies.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "max": {
                                "type": "number"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-extraneous-dependencies": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-extraneous-dependencies.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "devDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "optionalDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "peerDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "bundledDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "packageDir": {
                                "type": [
                                    "string",
                                    "array"
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-absolute-path": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-absolute-path.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "amd": {
                                "type": "boolean"
                            },
                            "esmodule": {
                                "type": "boolean"
                            },
                            "ignore": {
                                "type": "array",
                                "minItems": 1,
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-nodejs-modules": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-nodejs-modules.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-webpack-loader-syntax": {
                "type": "problem",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-webpack-loader-syntax.md"
                },
                "schema": []
            },
            "import/order": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/order.md"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "groups": {
                                "type": "array"
                            },
                            "pathGroupsExcludedImportTypes": {
                                "type": "array"
                            },
                            "pathGroups": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "pattern": {
                                            "type": "string"
                                        },
                                        "patternOptions": {
                                            "type": "object"
                                        },
                                        "group": {
                                            "type": "string",
                                            "enum": [
                                                "builtin",
                                                "external",
                                                "internal",
                                                "unknown",
                                                "parent",
                                                "sibling",
                                                "index",
                                                "object"
                                            ]
                                        },
                                        "position": {
                                            "type": "string",
                                            "enum": [
                                                "after",
                                                "before"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "pattern",
                                        "group"
                                    ]
                                }
                            },
                            "newlines-between": {
                                "enum": [
                                    "ignore",
                                    "always",
                                    "always-and-inside-groups",
                                    "never"
                                ]
                            },
                            "alphabetize": {
                                "type": "object",
                                "properties": {
                                    "caseInsensitive": {
                                        "type": "boolean",
                                        "default": false
                                    },
                                    "order": {
                                        "enum": [
                                            "ignore",
                                            "asc",
                                            "desc"
                                        ],
                                        "default": "ignore"
                                    }
                                },
                                "additionalProperties": false
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/newline-after-import": {
                "type": "layout",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/newline-after-import.md"
                },
                "fixable": "whitespace",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "integer",
                                "minimum": 1
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/prefer-default-export": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/prefer-default-export.md"
                },
                "schema": []
            },
            "import/no-default-export": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-default-export.md"
                },
                "schema": []
            },
            "import/no-named-export": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-named-export.md"
                },
                "schema": []
            },
            "import/no-dynamic-require": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-dynamic-require.md"
                },
                "schema": []
            },
            "import/unambiguous": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/unambiguous.md"
                },
                "schema": []
            },
            "import/no-unassigned-import": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-unassigned-import.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "devDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "optionalDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "peerDependencies": {
                                "type": [
                                    "boolean",
                                    "array"
                                ]
                            },
                            "allow": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/no-useless-path-segments": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-useless-path-segments.md"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "commonjs": {
                                "type": "boolean"
                            },
                            "noUselessIndex": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "import/dynamic-import-chunkname": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/dynamic-import-chunkname.md"
                },
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "importFunctions": {
                                "type": "array",
                                "uniqueItems": true,
                                "items": {
                                    "type": "string"
                                }
                            },
                            "webpackChunknameFormat": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "import/exports-last": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/exports-last.md"
                },
                "schema": []
            },
            "import/no-deprecated": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/v2.22.0/docs/rules/no-deprecated.md"
                },
                "schema": []
            },
            "import/imports-first": {
                "type": "suggestion",
                "docs": {
                    "url": "https://github.com/benmosher/eslint-plugin-import/blob/7b25c1cb95ee18acc1531002fd343e1e6031f9ed/docs/rules/imports-first.md"
                },
                "fixable": "code",
                "schema": [
                    {
                        "type": "string",
                        "enum": [
                            "absolute-first",
                            "disable-absolute-first"
                        ]
                    }
                ],
                "deprecated": true
            },
            "node/callback-return": {
                "type": "suggestion",
                "docs": {
                    "description": "require `return` statements after callbacks",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/callback-return.md"
                },
                "schema": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "fixable": null,
                "messages": {
                    "missingReturn": "Expected return with your callback function."
                }
            },
            "node/exports-style": {
                "docs": {
                    "description": "enforce either `module.exports` or `exports`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/exports-style.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "module.exports",
                            "exports"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "allowBatchAssign": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/file-extension-in-import": {
                "docs": {
                    "description": "enforce the style of file extensions in `import` declarations",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/file-extension-in-import.md"
                },
                "fixable": "code",
                "messages": {
                    "requireExt": "require file extension '{{ext}}'.",
                    "forbidExt": "forbid file extension '{{ext}}'."
                },
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    },
                    {
                        "type": "object",
                        "properties": {
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": {
                            "enum": [
                                "always",
                                "never"
                            ]
                        }
                    }
                ],
                "type": "suggestion"
            },
            "node/global-require": {
                "type": "suggestion",
                "docs": {
                    "description": "require `require()` calls to be placed at top-level module scope",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/global-require.md"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "unexpected": "Unexpected require()."
                }
            },
            "node/handle-callback-err": {
                "type": "suggestion",
                "docs": {
                    "description": "require error handling in callbacks",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/handle-callback-err.md"
                },
                "fixable": null,
                "schema": [
                    {
                        "type": "string"
                    }
                ],
                "messages": {
                    "expected": "Expected error to be handled."
                }
            },
            "node/no-callback-literal": {
                "docs": {
                    "description": "ensure Node.js-style error-first callback pattern is followed",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-callback-literal.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": []
            },
            "node/no-deprecated-api": {
                "docs": {
                    "description": "disallow deprecated APIs",
                    "category": "Best Practices",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-deprecated-api.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string"
                            },
                            "ignoreModuleItems": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "_linklist",
                                        "_stream_wrap",
                                        "async_hooks.currentId",
                                        "async_hooks.triggerId",
                                        "buffer.Buffer()",
                                        "new buffer.Buffer()",
                                        "buffer.SlowBuffer",
                                        "constants",
                                        "crypto._toBuf",
                                        "crypto.Credentials",
                                        "crypto.DEFAULT_ENCODING",
                                        "crypto.createCipher",
                                        "crypto.createCredentials",
                                        "crypto.createDecipher",
                                        "crypto.fips",
                                        "crypto.prng",
                                        "crypto.pseudoRandomBytes",
                                        "crypto.rng",
                                        "domain",
                                        "events.EventEmitter.listenerCount",
                                        "events.listenerCount",
                                        "freelist",
                                        "fs.SyncWriteStream",
                                        "fs.exists",
                                        "fs.lchmod",
                                        "fs.lchmodSync",
                                        "http.createClient",
                                        "module.Module.createRequireFromPath",
                                        "module.Module.requireRepl",
                                        "module.Module._debug",
                                        "module.createRequireFromPath",
                                        "module.requireRepl",
                                        "module._debug",
                                        "net._setSimultaneousAccepts",
                                        "os.getNetworkInterfaces",
                                        "os.tmpDir",
                                        "path._makeLong",
                                        "process.EventEmitter",
                                        "process.assert",
                                        "process.binding",
                                        "process.env.NODE_REPL_HISTORY_FILE",
                                        "process.report.triggerReport",
                                        "punycode",
                                        "readline.codePointAt",
                                        "readline.getStringWidth",
                                        "readline.isFullWidthCodePoint",
                                        "readline.stripVTControlCharacters",
                                        "safe-buffer.Buffer()",
                                        "new safe-buffer.Buffer()",
                                        "safe-buffer.SlowBuffer",
                                        "sys",
                                        "timers.enroll",
                                        "timers.unenroll",
                                        "tls.CleartextStream",
                                        "tls.CryptoStream",
                                        "tls.SecurePair",
                                        "tls.convertNPNProtocols",
                                        "tls.createSecurePair",
                                        "tls.parseCertString",
                                        "tty.setRawMode",
                                        "url.parse",
                                        "url.resolve",
                                        "util.debug",
                                        "util.error",
                                        "util.isArray",
                                        "util.isBoolean",
                                        "util.isBuffer",
                                        "util.isDate",
                                        "util.isError",
                                        "util.isFunction",
                                        "util.isNull",
                                        "util.isNullOrUndefined",
                                        "util.isNumber",
                                        "util.isObject",
                                        "util.isPrimitive",
                                        "util.isRegExp",
                                        "util.isString",
                                        "util.isSymbol",
                                        "util.isUndefined",
                                        "util.log",
                                        "util.print",
                                        "util.pump",
                                        "util.puts",
                                        "util._extend",
                                        "vm.runInDebugContext"
                                    ]
                                },
                                "additionalItems": false,
                                "uniqueItems": true
                            },
                            "ignoreGlobalItems": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Buffer()",
                                        "new Buffer()",
                                        "COUNTER_NET_SERVER_CONNECTION",
                                        "COUNTER_NET_SERVER_CONNECTION_CLOSE",
                                        "COUNTER_HTTP_SERVER_REQUEST",
                                        "COUNTER_HTTP_SERVER_RESPONSE",
                                        "COUNTER_HTTP_CLIENT_REQUEST",
                                        "COUNTER_HTTP_CLIENT_RESPONSE",
                                        "GLOBAL",
                                        "Intl.v8BreakIterator",
                                        "require.extensions",
                                        "root",
                                        "process.EventEmitter",
                                        "process.assert",
                                        "process.binding",
                                        "process.env.NODE_REPL_HISTORY_FILE",
                                        "process.report.triggerReport"
                                    ]
                                },
                                "additionalItems": false,
                                "uniqueItems": true
                            },
                            "ignoreIndirectDependencies": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-exports-assign": {
                "docs": {
                    "description": "disallow the assignment to `exports`",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-exports-assign.md"
                },
                "fixable": null,
                "messages": {
                    "forbidden": "Unexpected assignment to 'exports' variable. Use 'module.exports' instead."
                },
                "schema": [],
                "type": "problem"
            },
            "node/no-extraneous-import": {
                "docs": {
                    "description": "disallow `import` declarations which import extraneous modules",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-extraneous-import.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowModules": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$"
                                },
                                "uniqueItems": true
                            },
                            "convertPath": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {},
                                        "patternProperties": {
                                            "^.+$": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "include": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "uniqueItems": true
                                                },
                                                "exclude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "replace": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "include",
                                                "replace"
                                            ]
                                        },
                                        "minItems": 1
                                    }
                                ]
                            },
                            "resolvePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-extraneous-require": {
                "docs": {
                    "description": "disallow `require()` expressions which import extraneous modules",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-extraneous-require.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowModules": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$"
                                },
                                "uniqueItems": true
                            },
                            "convertPath": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {},
                                        "patternProperties": {
                                            "^.+$": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "include": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "uniqueItems": true
                                                },
                                                "exclude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "replace": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "include",
                                                "replace"
                                            ]
                                        },
                                        "minItems": 1
                                    }
                                ]
                            },
                            "resolvePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-missing-import": {
                "docs": {
                    "description": "disallow `import` declarations which import non-existence modules",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-missing-import.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowModules": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$"
                                },
                                "uniqueItems": true
                            },
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            },
                            "resolvePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-missing-require": {
                "docs": {
                    "description": "disallow `require()` expressions which import non-existence modules",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-missing-require.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowModules": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$"
                                },
                                "uniqueItems": true
                            },
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            },
                            "resolvePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-mixed-requires": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `require` calls to be mixed with regular variable declarations",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-mixed-requires.md"
                },
                "fixable": null,
                "schema": [
                    {
                        "oneOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "grouping": {
                                        "type": "boolean"
                                    },
                                    "allowCall": {
                                        "type": "boolean"
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ],
                "messages": {
                    "noMixRequire": "Do not mix 'require' and other declarations.",
                    "noMixCoreModuleFileComputed": "Do not mix core, module, file and computed requires."
                }
            },
            "node/no-new-require": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow `new` operators with calls to `require`",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-new-require.md"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "noNewRequire": "Unexpected use of new with require."
                }
            },
            "node/no-path-concat": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow string concatenation with `__dirname` and `__filename`",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-path-concat.md"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "usePathFunctions": "Use path.join() or path.resolve() instead of string concatenation."
                }
            },
            "node/no-process-env": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `process.env`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-process-env.md"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "unexpectedProcessEnv": "Unexpected use of process.env."
                }
            },
            "node/no-process-exit": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow the use of `process.exit()`",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-process-exit.md"
                },
                "fixable": null,
                "schema": [],
                "messages": {
                    "noProcessExit": "Don't use process.exit(); throw an error instead."
                }
            },
            "node/no-restricted-import": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified modules when loaded by `require`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-restricted-import.md"
                },
                "fixable": null,
                "schema": [
                    {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "additionalItems": false
                                                }
                                            ]
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name"
                                    ]
                                }
                            ]
                        },
                        "additionalItems": false
                    }
                ],
                "messages": {
                    "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}"
                }
            },
            "node/no-restricted-require": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow specified modules when loaded by `require`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-restricted-require.md"
                },
                "fixable": null,
                "schema": [
                    {
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "additionalItems": false
                                                }
                                            ]
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "additionalProperties": false,
                                    "required": [
                                        "name"
                                    ]
                                }
                            ]
                        },
                        "additionalItems": false
                    }
                ],
                "messages": {
                    "restricted": "'{{name}}' module is restricted from being used.{{customMessage}}"
                }
            },
            "node/no-sync": {
                "type": "suggestion",
                "docs": {
                    "description": "disallow synchronous methods",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-sync.md"
                },
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowAtRootLevel": {
                                "type": "boolean",
                                "default": false
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "noSync": "Unexpected sync method: '{{propertyName}}'."
                }
            },
            "node/no-unpublished-bin": {
                "docs": {
                    "description": "disallow `bin` files that npm ignores",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unpublished-bin.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "convertPath": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {},
                                        "patternProperties": {
                                            "^.+$": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "include": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "uniqueItems": true
                                                },
                                                "exclude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "replace": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "include",
                                                "replace"
                                            ]
                                        },
                                        "minItems": 1
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "node/no-unpublished-import": {
                "docs": {
                    "description": "disallow `import` declarations which import private modules",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unpublished-import.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowModules": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$"
                                },
                                "uniqueItems": true
                            },
                            "convertPath": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {},
                                        "patternProperties": {
                                            "^.+$": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "include": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "uniqueItems": true
                                                },
                                                "exclude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "replace": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "include",
                                                "replace"
                                            ]
                                        },
                                        "minItems": 1
                                    }
                                ]
                            },
                            "resolvePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-unpublished-require": {
                "docs": {
                    "description": "disallow `require()` expressions which import private modules",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unpublished-require.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allowModules": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^(?:@[a-zA-Z0-9_\\-.]+/)?[a-zA-Z0-9_\\-.]+$"
                                },
                                "uniqueItems": true
                            },
                            "convertPath": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {},
                                        "patternProperties": {
                                            "^.+$": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "include": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "uniqueItems": true
                                                },
                                                "exclude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "replace": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "include",
                                                "replace"
                                            ]
                                        },
                                        "minItems": 1
                                    }
                                ]
                            },
                            "resolvePaths": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "uniqueItems": true
                            },
                            "tryExtensions": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "^\\."
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-unsupported-features/es-builtins": {
                "docs": {
                    "description": "disallow unsupported ECMAScript built-ins on the specified version",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unsupported-features/es-builtins.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string"
                            },
                            "ignores": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "Array.from",
                                        "Array.of",
                                        "BigInt",
                                        "Map",
                                        "Math.acosh",
                                        "Math.asinh",
                                        "Math.atanh",
                                        "Math.cbrt",
                                        "Math.clz32",
                                        "Math.cosh",
                                        "Math.expm1",
                                        "Math.fround",
                                        "Math.hypot",
                                        "Math.imul",
                                        "Math.log10",
                                        "Math.log1p",
                                        "Math.log2",
                                        "Math.sign",
                                        "Math.sinh",
                                        "Math.tanh",
                                        "Math.trunc",
                                        "Number.EPSILON",
                                        "Number.isFinite",
                                        "Number.isInteger",
                                        "Number.isNaN",
                                        "Number.isSafeInteger",
                                        "Number.MAX_SAFE_INTEGER",
                                        "Number.MIN_SAFE_INTEGER",
                                        "Number.parseFloat",
                                        "Number.parseInt",
                                        "Object.assign",
                                        "Object.fromEntries",
                                        "Object.getOwnPropertySymbols",
                                        "Object.is",
                                        "Object.setPrototypeOf",
                                        "Object.values",
                                        "Object.entries",
                                        "Object.getOwnPropertyDescriptors",
                                        "Promise",
                                        "Promise.allSettled",
                                        "Proxy",
                                        "Reflect",
                                        "Set",
                                        "String.fromCodePoint",
                                        "String.raw",
                                        "Symbol",
                                        "Int8Array",
                                        "Uint8Array",
                                        "Uint8ClampedArray",
                                        "Int16Array",
                                        "Uint16Array",
                                        "Int32Array",
                                        "Uint32Array",
                                        "BigInt64Array",
                                        "BigUint64Array",
                                        "Float32Array",
                                        "Float64Array",
                                        "DataView",
                                        "WeakMap",
                                        "WeakSet",
                                        "Atomics",
                                        "SharedArrayBuffer",
                                        "globalThis"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unsupported": "The '{{name}}' is not supported until Node.js {{supported}}. The configured version range is '{{version}}'."
                }
            },
            "node/no-unsupported-features/es-syntax": {
                "docs": {
                    "description": "disallow unsupported ECMAScript syntax on the specified version",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unsupported-features/es-syntax.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string"
                            },
                            "ignores": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "arrowFunctions",
                                        "binaryNumericLiterals",
                                        "blockScopedFunctions",
                                        "blockScopedVariables",
                                        "classes",
                                        "computedProperties",
                                        "defaultParameters",
                                        "destructuring",
                                        "forOfLoops",
                                        "generators",
                                        "modules",
                                        "new.target",
                                        "objectSuperProperties",
                                        "octalNumericLiterals",
                                        "propertyShorthands",
                                        "regexpU",
                                        "regexpY",
                                        "restParameters",
                                        "spreadElements",
                                        "templateLiterals",
                                        "unicodeCodePointEscapes",
                                        "exponentialOperators",
                                        "asyncFunctions",
                                        "trailingCommasInFunctions",
                                        "asyncIteration",
                                        "malformedTemplateLiterals",
                                        "regexpLookbehind",
                                        "regexpNamedCaptureGroups",
                                        "regexpS",
                                        "regexpUnicodeProperties",
                                        "restSpreadProperties",
                                        "jsonSuperset",
                                        "optionalCatchBinding",
                                        "bigint",
                                        "dynamicImport"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "no-arrow-functions": "Arrow functions are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-binary-numeric-literals": "Binary numeric literals are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-block-scoped-functions-strict": "Block-scoped functions in strict mode are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-block-scoped-functions-sloppy": "Block-scoped functions in non-strict mode are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-block-scoped-variables-strict": "Block-scoped variables in strict mode are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-block-scoped-variables-sloppy": "Block-scoped variables in non-strict mode are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-classes-strict": "Classes in strict mode are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-classes-sloppy": "Classes in non-strict mode are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-computed-properties": "Computed properties are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-default-parameters": "Default parameters are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-destructuring": "Destructuring is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-for-of-loops": "'for-of' loops are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-generators": "Generator functions are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-modules": "Import and export declarations are not supported yet.",
                    "no-new-target": "'new.target' is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-object-super-properties": "'super' in object literals is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-octal-numeric-literals": "Octal numeric literals are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-property-shorthands": "Property shorthands are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-property-shorthands-getset": "Property shorthands of 'get' and 'set' are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-regexp-u-flag": "RegExp 'u' flag is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-regexp-y-flag": "RegExp 'y' flag is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-rest-parameters": "Rest parameters are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-spread-elements": "Spread elements are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-template-literals": "Template literals are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-unicode-codepoint-escapes": "Unicode code point escapes are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-exponential-operators": "Exponential operators are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-async-functions": "Async functions are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-trailing-function-commas": "Trailing commas in function syntax are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-async-iteration": "Async iteration is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-malformed-template-literals": "Malformed template literals are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-regexp-lookbehind-assertions": "RegExp lookbehind assertions are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-regexp-named-capture-groups": "RegExp named capture groups are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-regexp-s-flag": "RegExp 's' flag is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-regexp-unicode-property-escapes": "RegExp Unicode property escapes are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-rest-spread-properties": "Rest/spread properties are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-json-superset": "'\\u{{code}}' in string literals is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-optional-catch-binding": "The omission of 'catch' binding is not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-bigint": "Bigint literals are not supported until Node.js {{supported}}. The configured version range is '{{version}}'.",
                    "no-bigint-property-names": "Bigint literal property names are not supported yet.",
                    "no-dynamic-import": "'import()' expressions are not supported yet."
                }
            },
            "node/no-unsupported-features/node-builtins": {
                "docs": {
                    "description": "disallow unsupported Node.js built-in APIs on the specified version",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unsupported-features/node-builtins.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "version": {
                                "type": "string"
                            },
                            "ignores": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "queueMicrotask",
                                        "require.resolve.paths",
                                        "Buffer.alloc",
                                        "Buffer.allocUnsafe",
                                        "Buffer.allocUnsafeSlow",
                                        "Buffer.from",
                                        "TextDecoder",
                                        "TextEncoder",
                                        "URL",
                                        "URLSearchParams",
                                        "console.clear",
                                        "console.count",
                                        "console.countReset",
                                        "console.debug",
                                        "console.dirxml",
                                        "console.group",
                                        "console.groupCollapsed",
                                        "console.groupEnd",
                                        "console.table",
                                        "console.markTimeline",
                                        "console.profile",
                                        "console.profileEnd",
                                        "console.timeLog",
                                        "console.timeStamp",
                                        "console.timeline",
                                        "console.timelineEnd",
                                        "process.allowedNodeEnvironmentFlags",
                                        "process.argv0",
                                        "process.channel",
                                        "process.cpuUsage",
                                        "process.emitWarning",
                                        "process.getegid",
                                        "process.geteuid",
                                        "process.hasUncaughtExceptionCaptureCallback",
                                        "process.hrtime.bigint",
                                        "process.ppid",
                                        "process.release",
                                        "process.report",
                                        "process.resourceUsage",
                                        "process.setegid",
                                        "process.seteuid",
                                        "process.setUncaughtExceptionCaptureCallback",
                                        "process.stdout.getColorDepth",
                                        "process.stdout.hasColor",
                                        "process.stderr.getColorDepth",
                                        "process.stderr.hasColor",
                                        "assert.strict",
                                        "assert.strict.doesNotReject",
                                        "assert.strict.rejects",
                                        "assert.deepStrictEqual",
                                        "assert.doesNotReject",
                                        "assert.notDeepStrictEqual",
                                        "assert.rejects",
                                        "async_hooks",
                                        "async_hooks.createHook",
                                        "buffer.Buffer.alloc",
                                        "buffer.Buffer.allocUnsafe",
                                        "buffer.Buffer.allocUnsafeSlow",
                                        "buffer.Buffer.from",
                                        "buffer.kMaxLength",
                                        "buffer.transcode",
                                        "buffer.constants",
                                        "child_process.ChildProcess",
                                        "crypto.Certificate.exportChallenge",
                                        "crypto.Certificate.exportPublicKey",
                                        "crypto.Certificate.verifySpkac",
                                        "crypto.ECDH",
                                        "crypto.KeyObject",
                                        "crypto.createPrivateKey",
                                        "crypto.createPublicKey",
                                        "crypto.createSecretKey",
                                        "crypto.constants",
                                        "crypto.fips",
                                        "crypto.generateKeyPair",
                                        "crypto.generateKeyPairSync",
                                        "crypto.getCurves",
                                        "crypto.getFips",
                                        "crypto.privateEncrypt",
                                        "crypto.publicDecrypt",
                                        "crypto.randomFillSync",
                                        "crypto.randomFill",
                                        "crypto.scrypt",
                                        "crypto.scryptSync",
                                        "crypto.setFips",
                                        "crypto.sign",
                                        "crypto.timingSafeEqual",
                                        "crypto.verify",
                                        "dns.Resolver",
                                        "dns.resolvePtr",
                                        "dns.promises",
                                        "events.EventEmitter.once",
                                        "events.once",
                                        "fs.Dirent",
                                        "fs.copyFile",
                                        "fs.copyFileSync",
                                        "fs.mkdtemp",
                                        "fs.mkdtempSync",
                                        "fs.realpath.native",
                                        "fs.realpathSync.native",
                                        "fs.promises",
                                        "fs.writev",
                                        "fs.writevSync",
                                        "http2",
                                        "inspector",
                                        "module.Module.builtinModules",
                                        "module.Module.createRequireFromPath",
                                        "module.Module.createRequire",
                                        "module.Module.syncBuiltinESMExports",
                                        "module.builtinModules",
                                        "module.createRequireFromPath",
                                        "module.createRequire",
                                        "module.syncBuiltinESMExports",
                                        "os.constants",
                                        "os.constants.priority",
                                        "os.getPriority",
                                        "os.homedir",
                                        "os.setPriority",
                                        "os.userInfo",
                                        "path.toNamespacedPath",
                                        "perf_hooks",
                                        "perf_hooks.monitorEventLoopDelay",
                                        "stream.Readable.from",
                                        "stream.finished",
                                        "stream.pipeline",
                                        "trace_events",
                                        "url.URL",
                                        "url.URLSearchParams",
                                        "url.domainToASCII",
                                        "url.domainToUnicode",
                                        "util.callbackify",
                                        "util.formatWithOptions",
                                        "util.getSystemErrorName",
                                        "util.inspect.custom",
                                        "util.inspect.defaultOptions",
                                        "util.inspect.replDefaults",
                                        "util.isDeepStrictEqual",
                                        "util.promisify",
                                        "util.TextDecoder",
                                        "util.TextEncoder",
                                        "util.types",
                                        "util.types.isBoxedPrimitive",
                                        "v8",
                                        "v8.DefaultDeserializer",
                                        "v8.DefaultSerializer",
                                        "v8.Deserializer",
                                        "v8.Serializer",
                                        "v8.cachedDataVersionTag",
                                        "v8.deserialize",
                                        "v8.getHeapCodeStatistics",
                                        "v8.getHeapSnapshot",
                                        "v8.getHeapSpaceStatistics",
                                        "v8.serialize",
                                        "v8.writeHeapSnapshot",
                                        "vm.Module",
                                        "vm.compileFunction",
                                        "worker_threads"
                                    ]
                                },
                                "uniqueItems": true
                            }
                        },
                        "additionalProperties": false
                    }
                ],
                "messages": {
                    "unsupported": "The '{{name}}' is not supported until Node.js {{supported}}. The configured version range is '{{version}}'."
                }
            },
            "node/prefer-global/buffer": {
                "docs": {
                    "description": "enforce either `Buffer` or `require(\"buffer\").Buffer`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/buffer.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"buffer\").Buffer'. Use the global variable 'Buffer' instead.",
                    "preferModule": "Unexpected use of the global variable 'Buffer'. Use 'require(\"buffer\").Buffer' instead."
                }
            },
            "node/prefer-global/console": {
                "docs": {
                    "description": "enforce either `console` or `require(\"console\")`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/console.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"console\")'. Use the global variable 'console' instead.",
                    "preferModule": "Unexpected use of the global variable 'console'. Use 'require(\"console\")' instead."
                }
            },
            "node/prefer-global/process": {
                "docs": {
                    "description": "enforce either `process` or `require(\"process\")`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/process.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"process\")'. Use the global variable 'process' instead.",
                    "preferModule": "Unexpected use of the global variable 'process'. Use 'require(\"process\")' instead."
                }
            },
            "node/prefer-global/text-decoder": {
                "docs": {
                    "description": "enforce either `TextDecoder` or `require(\"util\").TextDecoder`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/text-decoder.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"util\").TextDecoder'. Use the global variable 'TextDecoder' instead.",
                    "preferModule": "Unexpected use of the global variable 'TextDecoder'. Use 'require(\"util\").TextDecoder' instead."
                }
            },
            "node/prefer-global/text-encoder": {
                "docs": {
                    "description": "enforce either `TextEncoder` or `require(\"util\").TextEncoder`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/text-encoder.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"util\").TextEncoder'. Use the global variable 'TextEncoder' instead.",
                    "preferModule": "Unexpected use of the global variable 'TextEncoder'. Use 'require(\"util\").TextEncoder' instead."
                }
            },
            "node/prefer-global/url-search-params": {
                "docs": {
                    "description": "enforce either `URLSearchParams` or `require(\"url\").URLSearchParams`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/url-search-params.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"url\").URLSearchParams'. Use the global variable 'URLSearchParams' instead.",
                    "preferModule": "Unexpected use of the global variable 'URLSearchParams'. Use 'require(\"url\").URLSearchParams' instead."
                }
            },
            "node/prefer-global/url": {
                "docs": {
                    "description": "enforce either `URL` or `require(\"url\").URL`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-global/url.md"
                },
                "type": "suggestion",
                "fixable": null,
                "schema": [
                    {
                        "enum": [
                            "always",
                            "never"
                        ]
                    }
                ],
                "messages": {
                    "preferGlobal": "Unexpected use of 'require(\"url\").URL'. Use the global variable 'URL' instead.",
                    "preferModule": "Unexpected use of the global variable 'URL'. Use 'require(\"url\").URL' instead."
                }
            },
            "node/prefer-promises/dns": {
                "docs": {
                    "description": "enforce `require(\"dns\").promises`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-promises/dns.md"
                },
                "fixable": null,
                "messages": {
                    "preferPromises": "Use 'dns.promises.{{name}}()' instead.",
                    "preferPromisesNew": "Use 'new dns.promises.{{name}}()' instead."
                },
                "schema": [],
                "type": "suggestion"
            },
            "node/prefer-promises/fs": {
                "docs": {
                    "description": "enforce `require(\"fs\").promises`",
                    "category": "Stylistic Issues",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/prefer-promises/fs.md"
                },
                "fixable": null,
                "messages": {
                    "preferPromises": "Use 'fs.promises.{{name}}()' instead."
                },
                "schema": [],
                "type": "suggestion"
            },
            "node/process-exit-as-throw": {
                "docs": {
                    "description": "make `process.exit()` expressions the same code path as `throw`",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/process-exit-as-throw.md"
                },
                "type": "problem",
                "fixable": null,
                "schema": [],
                "supported": true
            },
            "node/shebang": {
                "docs": {
                    "description": "suggest correct usage of shebang",
                    "category": "Possible Errors",
                    "recommended": true,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/shebang.md"
                },
                "type": "problem",
                "fixable": "code",
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "convertPath": {
                                "anyOf": [
                                    {
                                        "type": "object",
                                        "properties": {},
                                        "patternProperties": {
                                            "^.+$": {
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "minItems": 2,
                                                "maxItems": 2
                                            }
                                        },
                                        "additionalProperties": false
                                    },
                                    {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "include": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 1,
                                                    "uniqueItems": true
                                                },
                                                "exclude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "uniqueItems": true
                                                },
                                                "replace": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "minItems": 2,
                                                    "maxItems": 2
                                                }
                                            },
                                            "additionalProperties": false,
                                            "required": [
                                                "include",
                                                "replace"
                                            ]
                                        },
                                        "minItems": 1
                                    }
                                ]
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-hide-core-modules": {
                "docs": {
                    "description": "disallow third-party modules which are hiding core modules",
                    "category": "Possible Errors",
                    "recommended": false,
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-hide-core-modules.md"
                },
                "type": "problem",
                "deprecated": true,
                "fixable": null,
                "schema": [
                    {
                        "type": "object",
                        "properties": {
                            "allow": {
                                "type": "array",
                                "items": {
                                    "enum": [
                                        "assert",
                                        "buffer",
                                        "child_process",
                                        "cluster",
                                        "console",
                                        "constants",
                                        "crypto",
                                        "dgram",
                                        "dns",
                                        "events",
                                        "fs",
                                        "http",
                                        "https",
                                        "module",
                                        "net",
                                        "os",
                                        "path",
                                        "querystring",
                                        "readline",
                                        "repl",
                                        "stream",
                                        "string_decoder",
                                        "timers",
                                        "tls",
                                        "tty",
                                        "url",
                                        "util",
                                        "vm",
                                        "zlib"
                                    ]
                                },
                                "additionalItems": false,
                                "uniqueItems": true
                            },
                            "ignoreDirectDependencies": {
                                "type": "boolean"
                            },
                            "ignoreIndirectDependencies": {
                                "type": "boolean"
                            }
                        },
                        "additionalProperties": false
                    }
                ]
            },
            "node/no-unsupported-features": {
                "docs": {
                    "description": "disallow unsupported ECMAScript features on the specified version",
                    "category": "Possible Errors",
                    "recommended": false,
                    "replacedBy": [
                        "node/no-unsupported-features/es-syntax",
                        "node/no-unsupported-features/es-builtins"
                    ],
                    "url": "https://github.com/mysticatea/eslint-plugin-node/blob/v11.1.0/docs/rules/no-unsupported-features.md"
                },
                "type": "problem",
                "deprecated": true,
                "fixable": null,
                "schema": [
                    {
                        "anyOf": [
                            {
                                "enum": [
                                    0.1,
                                    0.12,
                                    4,
                                    5,
                                    6,
                                    6.5,
                                    7,
                                    7.6,
                                    8,
                                    8.3,
                                    9,
                                    10
                                ]
                            },
                            {
                                "type": "string",
                                "pattern": "^(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)$"
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "version": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    0.1,
                                                    0.12,
                                                    4,
                                                    5,
                                                    6,
                                                    6.5,
                                                    7,
                                                    7.6,
                                                    8,
                                                    8.3,
                                                    9,
                                                    10
                                                ]
                                            },
                                            {
                                                "type": "string",
                                                "pattern": "^(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)\\.(?:0|[1-9]\\d*)$"
                                            }
                                        ]
                                    },
                                    "ignores": {
                                        "type": "array",
                                        "items": {
                                            "enum": [
                                                "syntax",
                                                "defaultParameters",
                                                "restParameters",
                                                "spreadOperators",
                                                "objectLiteralExtensions",
                                                "objectPropertyShorthandOfGetSet",
                                                "forOf",
                                                "binaryNumberLiterals",
                                                "octalNumberLiterals",
                                                "templateStrings",
                                                "regexpY",
                                                "regexpU",
                                                "destructuring",
                                                "unicodeCodePointEscapes",
                                                "new.target",
                                                "const",
                                                "let",
                                                "blockScopedFunctions",
                                                "arrowFunctions",
                                                "generatorFunctions",
                                                "classes",
                                                "modules",
                                                "exponentialOperators",
                                                "asyncAwait",
                                                "trailingCommasInFunctions",
                                                "templateLiteralRevision",
                                                "regexpS",
                                                "regexpNamedCaptureGroups",
                                                "regexpLookbehind",
                                                "regexpUnicodeProperties",
                                                "restProperties",
                                                "spreadProperties",
                                                "asyncGenerators",
                                                "forAwaitOf",
                                                "runtime",
                                                "globalObjects",
                                                "typedArrays",
                                                "Int8Array",
                                                "Uint8Array",
                                                "Uint8ClampedArray",
                                                "Int16Array",
                                                "Uint16Array",
                                                "Int32Array",
                                                "Uint32Array",
                                                "Float32Array",
                                                "Float64Array",
                                                "DataView",
                                                "Map",
                                                "Set",
                                                "WeakMap",
                                                "WeakSet",
                                                "Proxy",
                                                "Reflect",
                                                "Promise",
                                                "Symbol",
                                                "SharedArrayBuffer",
                                                "Atomics",
                                                "staticMethods",
                                                "Object.*",
                                                "Object.assign",
                                                "Object.is",
                                                "Object.getOwnPropertySymbols",
                                                "Object.setPrototypeOf",
                                                "Object.values",
                                                "Object.entries",
                                                "Object.getOwnPropertyDescriptors",
                                                "String.*",
                                                "String.raw",
                                                "String.fromCodePoint",
                                                "Array.*",
                                                "Array.from",
                                                "Array.of",
                                                "Number.*",
                                                "Number.isFinite",
                                                "Number.isInteger",
                                                "Number.isSafeInteger",
                                                "Number.isNaN",
                                                "Number.EPSILON",
                                                "Number.MIN_SAFE_INTEGER",
                                                "Number.MAX_SAFE_INTEGER",
                                                "Math.*",
                                                "Math.clz32",
                                                "Math.imul",
                                                "Math.sign",
                                                "Math.log10",
                                                "Math.log2",
                                                "Math.log1p",
                                                "Math.expm1",
                                                "Math.cosh",
                                                "Math.sinh",
                                                "Math.tanh",
                                                "Math.acosh",
                                                "Math.asinh",
                                                "Math.atanh",
                                                "Math.trunc",
                                                "Math.fround",
                                                "Math.cbrt",
                                                "Math.hypot",
                                                "Symbol.*",
                                                "Symbol.hasInstance",
                                                "Symbol.isConcatSpreadablec",
                                                "Symbol.iterator",
                                                "Symbol.species",
                                                "Symbol.replace",
                                                "Symbol.search",
                                                "Symbol.split",
                                                "Symbol.match",
                                                "Symbol.toPrimitive",
                                                "Symbol.toStringTag",
                                                "Symbol.unscopables",
                                                "Atomics.*",
                                                "Atomics.add",
                                                "Atomics.and",
                                                "Atomics.compareExchange",
                                                "Atomics.exchange",
                                                "Atomics.wait",
                                                "Atomics.wake",
                                                "Atomics.isLockFree",
                                                "Atomics.load",
                                                "Atomics.or",
                                                "Atomics.store",
                                                "Atomics.sub",
                                                "Atomics.xor",
                                                "extends",
                                                "extendsArray",
                                                "extendsRegExp",
                                                "extendsFunction",
                                                "extendsPromise",
                                                "extendsBoolean",
                                                "extendsNumber",
                                                "extendsString",
                                                "extendsMap",
                                                "extendsSet",
                                                "extendsNull"
                                            ]
                                        },
                                        "uniqueItems": true
                                    }
                                },
                                "additionalProperties": false
                            }
                        ]
                    }
                ]
            },
            "promise/param-names": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/param-names.md"
                },
                "fixable": "code"
            },
            "promise/no-return-wrap": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-return-wrap.md"
                },
                "messages": {
                    "resolve": "Avoid wrapping return values in Promise.resolve",
                    "reject": "Expected throw instead of Promise.reject"
                }
            },
            "promise/always-return": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/always-return.md"
                }
            },
            "promise/catch-or-return": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/catch-or-return.md"
                },
                "messages": {
                    "terminationMethod": "Expected {{ terminationMethod }}() or return"
                }
            },
            "promise/prefer-await-to-callbacks": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/prefer-await-to-callbacks.md"
                },
                "messages": {
                    "error": "Avoid callbacks. Prefer Async/Await."
                }
            },
            "promise/prefer-await-to-then": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/prefer-await-to-then.md"
                }
            },
            "promise/no-native": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-native.md"
                },
                "messages": {
                    "name": "\"{{name}}\" is not defined."
                }
            },
            "promise/no-callback-in-promise": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-callback-in-promise.md"
                },
                "messages": {
                    "callback": "Avoid calling back inside of a promise."
                }
            },
            "promise/no-promise-in-callback": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-promise-in-callback.md"
                }
            },
            "promise/no-nesting": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-nesting.md"
                }
            },
            "promise/avoid-new": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/avoid-new.md"
                }
            },
            "promise/no-new-statics": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-new-statics.md"
                },
                "fixable": "code"
            },
            "promise/no-return-in-finally": {
                "docs": {
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/no-return-in-finally.md"
                }
            },
            "promise/valid-params": {
                "docs": {
                    "description": "Ensures the proper number of arguments are passed to Promise functions",
                    "url": "https://github.com/xjamundx/eslint-plugin-promise/tree/v4.2.1/docs/rules/valid-params.md"
                }
            },
            "standard/array-bracket-even-spacing": {
                "docs": {
                    "url": "https://github.com/standard/eslint-plugin-standard#rules-explanations"
                }
            },
            "standard/computed-property-even-spacing": {
                "docs": {
                    "url": "https://github.com/standard/eslint-plugin-standard#rules-explanations"
                }
            },
            "standard/object-curly-even-spacing": {
                "docs": {
                    "url": "https://github.com/standard/eslint-plugin-standard#rules-explanations"
                }
            },
            "standard/no-callback-literal": {
                "docs": {
                    "url": "https://github.com/standard/eslint-plugin-standard#rules-explanations"
                }
            }
        }
    }
}
